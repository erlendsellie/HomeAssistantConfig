homeassistant:
  customize:
    # Add state-class to enable long term statistics:
    sensor.pricelevel:
      state_class: measurement
    sensor.spotpris_average_today:
      state_class: measurement

sensor:
  - platform: template
    sensors:
      # heatpumpmode:
      #   friendly_name: "Heat Pump Mode"
      #   value_template: "{{states.climate.varmepumpe.attributes.last_on_operation}}"
      pricelevel:
        friendly_name: "Price Level"
        value_template: "{{states.sensor.electricity_price_sivert_thonstads_vei_6b.attributes.price_level}}"
      # tibberheatdifference:
      #   friendly_name: "Tibber Heat Difference"
      #   unit_of_measurement: "Â°C"
      #   # The Heater is always set to 22 in Tibber. This way, we can see if Tibber wants to increase or decrease the temperature.
      #   value_template: >-
      #     {%-set targetTemp = 22 -%}
      #     {%-set actualtemp = states.climate.stua_heater.attributes.temperature | float(default=0)-%}
      #     {{actualtemp - targetTemp}}
      today_max_price:
        value_template: >-
          {% set today = state_attr('sensor.nordpool', 'raw_today') | default([]) | sort(attribute='value') %}
          {% if today | length > 0 %}
            {{ (today[-1].value * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      tomorrow_max_price:
        value_template: >-
          {% set tomorrow = state_attr('sensor.nordpool', 'raw_tomorrow') | default([]) | sort(attribute='value') %}
          {% if tomorrow | length > 0 %}
            {{ (tomorrow[-1].value * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      tomorrow_low_price:
        value_template: >-
          {% set tomorrow = state_attr('sensor.nordpool', 'raw_tomorrow') | default([]) | sort(attribute='value') %}
          {% if tomorrow | length > 0 %}
            {{ (tomorrow[0].value * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      today_low_price:
        value_template: >-
          {% set today = state_attr('sensor.nordpool', 'raw_today') | default([]) | sort(attribute='value') %}
          {% if today | length > 0 %}
            {{ (today[0].value * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      price_difference_tomorrow:
        value_template: >-
          {% set today = state_attr('sensor.nordpool', 'raw_today') | default([]) | sort(attribute='value') %}
          {% set tomorrow = state_attr('sensor.nordpool', 'raw_tomorrow') | default([]) | sort(attribute='value') %}
          {% if today | length > 0 and tomorrow | length > 0 %}
            {{ ((tomorrow[0].value - today[0].value) * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      price_difference_nights:
        value_template: >-
          {% set today = states('sensor.billigste_pris_ikveld') | float(0) %}
          {% set tomorrow = states('sensor.billigste_pris_imorgen_ettermiddag') | float(0) %}
          {{ ((tomorrow - today) * 100) | round(2) }}

      rest_of_today_low_price:
        value_template: >-
          {% set today = state_attr('sensor.nordpool', 'raw_today') | default([]) %}
          {% set now_hour = now().hour %}
          {% set future_hours = today | selectattr('start', 'ge', now()) | list %}
          {% if future_hours | length > 0 %}
            {% set sorted_future = future_hours | sort(attribute='value') %}
            {{ (sorted_future[0].value * 100) | round(2) }}
          {% else %}
            0
          {% endif %}

      # price_rest_of_day:
      #   value_template: >-
      #     {% set today=state_attr('sensor.nordpool', 'raw_today') %}
      #     {%-set now = now().hour | float(default=0)-%}
      #     {% set futureHours = namespace(values=[]) %}
      #     {% for hour in today %}
      #         {% if hour.start.hour >= now %}
      #         {% set futureHours.values = futureHours.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
      #         {% endif %}
      #     {%- endfor -%}
      #     {{futureHours.values}}
      billigste_pris_ikveld:
        value_template: >-
          {%-set nowTime = now().hour | float(default=0)-%}
          {% set tonight = namespace(values=[]) %}
          {% set today=state_attr('sensor.nordpool', 'raw_today') %}
          {% for hour in today %}
              {% if hour.start.hour >= nowTime %}
              {% set tonight.values = tonight.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
              {% endif %}
          {%- endfor -%}
          {% set tonight_min = tonight.values |sort(attribute='value') %}
          {% set cheapest = tonight_min[0] or None %}
          {{cheapest.value or 0}}
      billigste_pris_imorgen_ettermiddag:
        value_template: >-
          {% if states.sensor.nordpool.attributes.tomorrow_valid  %}
            {% set tomorrow=state_attr('sensor.nordpool', 'raw_tomorrow') %}
            {% set tomorrow_night = namespace(values=[]) %}
            {% for hour in tomorrow %}
              {% if hour.start.hour > 16 %}
                  {% set tomorrow_night.values = tomorrow_night.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
              {% endif %}
            {%- endfor -%}
            {% set tomorrow_min = tomorrow_night.values |sort(attribute='value') %}
            {% set cheapest = tomorrow_min[0] or None %}
          {{cheapest.value or 0}}  
          {% endif %}
      billigste_time:
        value_template: >-
          {%-set nowTime = now().hour | float(default=0)-%}
          {% set tonight = namespace(values=[]) %}
          {% set today=state_attr('sensor.nordpool', 'raw_today') %}
          {% for hour in today %}
              {% if hour.start.hour >= nowTime %}
              {% set tonight.values = tonight.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
              {% endif %}
          {%- endfor -%}
          {% set tonight_min = tonight.values |sort(attribute='value') %}
          {% set cheapest = tonight_min[0] %}
          {% if states.sensor.nordpool.attributes.tomorrow_valid  %}
            {% set tomorrow=state_attr('sensor.nordpool', 'raw_tomorrow') %}
            {% set tomorrow_night = namespace(values=[]) %}
            {% for hour in tomorrow %}
                  {% set tomorrow_night.values = tomorrow_night.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
            {%- endfor -%}
            {% set tomorrow_min = tomorrow_night.values |sort(attribute='value') %}
            {% set cheapest = tomorrow_min[0] %}
          {% else %}
            {% set cheapest = tomorrow_min[0] %}
          {% endif %}
          {{cheapest.start}}
      pricespike:
        friendly_name: "Price spike today"
        value_template: >-
          {%-set nordpool = states.sensor.nordpool -%}
          {{nordpool.attributes.max / nordpool.attributes.min - 1 | round(2)}}
      spotpris_today:
        friendly_name: "Spotpris today"
        icon_template: "mdi:cash-multiple"
        unit_of_measurement: "NOK"
        value_template: >-
          {{
            ((states('sensor.accumulated_consumption_sivert_thonstads_vei_6b')| float(default=0))
            *(state_attr('sensor.nordpool', 'average')| float(default=0)))
            |round(2)
          }}
      spotpris_average_today:
        friendly_name: "Spotpris Avergage today"
        icon_template: "mdi:cash-multiple"
        unit_of_measurement: "NOK"
        value_template: >-
          {{state_attr('sensor.nordpool', 'average') | float(default=0)|round(2)}}
      fastpris_today:
        friendly_name: "Fastpris today"
        icon_template: "mdi:cash-multiple"
        unit_of_measurement: "NOK"
        value_template: >-
          {{
            ((states('sensor.accumulated_consumption_sivert_thonstads_vei_6b')| float(default=0))
            *(states('sensor.powerprice')| float(default=0)))
            |round(2)
          }}
      # difference_spotpris:
      #   friendly_name: "Besparelse i dag"
      #   icon_template: "mdi:cash-multiple"
      #   unit_of_measurement: "NOK"
      #   value_template: >-
      #     {{
      #       (states('sensor.fastpris_today')| float(default=0))
      #       -
      #       (states('sensor.spotpris_today')| float(default=0))
      #       |round(2)
      #     }}
      total_powerprice:
        friendly_name: Power Price
        unit_of_measurement: NOK
        value_template: >-
          {%set gridprice = states.sensor.gridprice.state | float(default=0)%}
          {%set powerprice = states.sensor.powerprice.state | float(default=0)%}
          {{powerprice + gridprice}}
      powerprice:
        friendly_name: Power Price
        unit_of_measurement: NOK/kWh
        value_template: >-
          {{0.54}}
      gridprice:
        friendly_name: New gridprice
        unit_of_measurement: NOK
        value_template: >-
          {% set hour = now().hour %}
          {% set day = now().day %}
          {% set month = now().month %}
          {% set pricePerKwh = 0.396125 %}
          {% if hour >= 22 or hour <= 5%}
            {% set pricePerKwh = 0.283625 %}
          {% endif %}
          {{pricePerKwh}}
      # gridprice:
      #   friendly_name: GridPrice
      #   unit_of_measurement: "NOK"
      #   value_template: >-
      #     {% set annualConsumption = states.sensor.electricity_price_sivert_thonstads_vei_6b.attributes.estimated_annual_consumption | float(default=0)%}
      #     {% set yearlyPriceGridPower = 2375 %}
      #     {% set yearlyPriceTibber = 39*12 %}
      #     {% set yearlyPrice = yearlyPriceTibber + yearlyPriceGridPower %}
      #     {% set kwhprice = 0.452375%}
      #     {{ (yearlyPrice + (kwhprice * annualConsumption)) / annualConsumption}}
      refheat:
        friendly_name: "Reference Heat"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set alarm = states.input_select.alarm.state -%}
          {%-set hjemmeTemp = states.input_number.hjemmetemp.state | float(default=0)%}
          {%-set borteTemp = states.input_number.bortetemp.state | float(default=0)%}
          {%-set nattaTemp = states.input_number.nattatemp.state | float(default=0)%}
          {% if alarm == 'Disarm' %}
            {%-set temp = hjemmeTemp -%}   
          {% elif alarm == 'Arm Home'%}
              {%-set temp = nattaTemp -%} 
          {% else %}
            {%-set temp = borteTemp -%} 
          {% endif %}        
          {{temp}}
      pricecorrection:
        friendly_name: "Price Analyzer"
        unit_of_measurement: "Â°C"
        attribute_templates:
          source: "{{ states.sensor.priceanalyzer.state }}"
        value_template: >-
          {%set analyzer = states.sensor.priceanalyzer%}
          {%set current_hour = analyzer.attributes.current_hour%}
          {%set temp = analyzer.state | float %}
          {%set outside_temp = states.sensor.ute_temperature.state | float(default=10)%}
          {%-set alarm = states.input_select.alarm.state -%}
          {%set effektledd = states('input_number.effektledd') | float(default=9.8) %}
          {%set is_charging = states('sensor.garage_power') | int(default=0) > 1%}
          {%if temp > 0 and outside_temp > 5%}
            {%if current_hour.price_next_hour > 2.00 or current_hour.value > 2.00%} {%set temp = temp * 2%} 
            {%elif current_hour.price_next_hour > 1.00 or current_hour.value > 1.00%} {%set temp = temp * 1%} 
            {%elif current_hour.is_max%} {%set temp = temp * 1%}
            {%else%} {%set temp = temp%}
            {%endif%}
          {%else%}
            {%if current_hour.price_next_hour > 6.00 or current_hour.value > 6.00%} {%set temp = temp * 4%} 
            {%elif current_hour.price_next_hour > 4.00 or current_hour.value > 4.00%} {%set temp = temp * 3%} 
            {%elif current_hour.price_next_hour > 1.00 or current_hour.value > 1.00%} {%set temp = temp * 1%} 
            {%elif current_hour.is_max%} {%set temp = temp * 1%}
            {%else%} {%set temp = temp%}
            {%endif%}
          {%endif%}
          {%if is_charging and effektledd < 10 and alarm == 'Arm Home'%}
            {%set temp = temp - 1 %}
          {%endif%}
          {{temp}}
      # pricecorrection_old:
      #   friendly_name: "Price Correction"
      #   unit_of_measurement: "Â°C"
      #   value_template: >-
      #     {%-set usingSpot = states.binary_sensor.usingspot.state == 'on' -%}
      #     {%-set priceGaining = states.binary_sensor.pricegaining.state == 'on' -%}
      #     {%-set priceFalling = states.binary_sensor.pricefalling.state == 'on' -%}
      #     {%-set isHeating = states.input_select.operationmode.state == 'heat' -%}
      #     {%-set isMaxPrice = states.binary_sensor.ismaxprice.state == 'on' -%}
      #     {%-set isPeak = states.binary_sensor.pricerelativycheap.state == 'off' -%}
      #     {%-set isLowPrice = states.binary_sensor.islowprice.state == 'on' or states.binary_sensor.pricerelativycheap.state == 'on' -%}
      #     {%-set isNordPoolLowPrice = states.binary_sensor.islowprice.state == 'on' -%}
      #     {%-set minPrice = states.sensor.nordpool.attributes.min | float(default=0)-%}
      #     {%-set price = states.sensor.nordpool.state | float(default=0)-%}
      #     {%-set nextPrice = states.sensor.nordpool.attributes.raw_today[now().hour + 1].value-%}
      #     {%-set isExtremePrice = (price * 100) > 100-%}
      #     {%-set pricecorrectiondownnexthour = states.binary_sensor.pricecorrectiondownnexthour.state -%}
      #     {%-set isMinPrice = minPrice == price -%}
      #     {%-set pricedifference = states.sensor.pricespike.state | float(default=0)%}
      #     {%-set tempDownToLong = states.binary_sensor.pricecorrection_down_for_3_hours.state == 'on' -%}
      #     {%-set tempDownToLong = false -%}
      #     {%-set tempDown = isMaxPrice or ((isPeak or priceFalling) and tempDownToLong == False) -%}
      #     {%-set catchUp = states.binary_sensor.afterpricereduction.state -%}
      #     {%-set catchUp = 'off' -%}
      #     {%-set temp =  0 -%}
      #     {%-set tempcorrection = 1 %}
      #     {% if ((price * 100) > 200) or ((nextPrice * 100) > 200) %}
      #       {%-set tempcorrection = 4 %}
      #     {% elif ((price * 100) > 100) or ((nextPrice * 100) > 100) %}
      #       {%-set tempcorrection = 3 %}
      #     {% elif pricedifference > 0.8 or isMaxPrice or isMinPrice %}
      #       {%-set tempcorrection = 2 %}
      #     {% endif %}
      #     {% if isHeating and pricedifference > 0.1%}
      #       {% if ((isLowPrice and priceGaining) or (tempDownToLong) or catchUp == 'on') %}
      #           {%-set temp =  temp + tempcorrection -%}
      #       {% elif (isLowPrice and (priceGaining == false or priceFalling == true and isMaxPrice == false)) %}
      #           {%-set temp = temp -%}
      #       {% elif (tempDown)%}
      #           {%-set temp =  temp - tempcorrection -%}
      #       {% endif %}
      #     {% endif %}
      #     {%if usingSpot == true%}
      #     {{temp | float}}
      #     {% else %}
      #       0
      #     {%endif%}
      baseheat:
        friendly_name: "Base Heat"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set alarm = states.input_select.alarm.state -%}
          {%-set hjemmeTemp = states.input_number.hjemmetemp.state | float(default=0)%}
          {%-set borteTemp = states.input_number.bortetemp.state | float(default=0)%}
          {%-set nattaTemp = states.input_number.nattatemp.state | float(default=0)%}
          {%-set priceGaining = states.binary_sensor.pricegaining.state == 'on' -%}
          {%-set isHeating = states.input_select.operationmode.state == 'heat' -%}
          {%-set isMaxPrice = states.binary_sensor.ismaxprice.state == 'on' -%}
          {%-set isPeak = states.binary_sensor.pricerelativycheap.state == 'off' -%}
          {%-set minPrice = (states.sensor.nordpool.attributes.min | float) -%}
          {%-set price = states.sensor.nordpool.state | float(default=0)-%}
          {%-set isMinPrice = minPrice == price -%}
          {%-set hour = now().hour | int(default=0)-%}
          {% set startdaywarming = states.input_datetime.nighttemp.state.split(':')[0] | float(default=0)%}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if alarm == 'Disarm' or (alarm == 'Arm Home' and (hour >= startdaywarming and priceGaining or hour > startdaywarming and hjemmeTemp > borteTemp) and hour < 16) %}
            {%-set temp = hjemmeTemp -%}
          {% elif alarm == 'Arm Home'%}
              {%-set temp = nattaTemp -%} 
          {% else %}
            {%-set temp = borteTemp -%}
          {% endif %}
          {% if temp > 15 %}
            {%-set temp = temp | float(default=0) + states.sensor.pricecorrection.state | float(default=0) -%}                 
          {% endif %}
          {% if limit %}
            {%-set temp = temp - 4 -%}                 
          {% endif %}
          {{temp}}
      sokkeltemp:
        friendly_name: "Sokkel temp"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set baseTemp = states.input_number.sokkeltemp.state | float(default=0)%}
          {%-set priceCorrection = states.sensor.pricecorrection.state | float(default=0)%}
          {%-set temp = baseTemp + priceCorrection -%}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if limit %}
            {%-set temp = temp - 8 -%}
          {% endif %}
          {{temp}}
      vindfangtemp:
        friendly_name: "Vindfang temp"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set baseTemp = states.input_number.vindfangtemp.state | float(default=0)%}
          {%-set priceCorrection = states.sensor.pricecorrection.state | float(default=0)%}
          {%-set temp = baseTemp + priceCorrection -%}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if limit %}
            {%-set temp = temp - 8 -%}
          {% endif %}
          {{temp}}
      bathroomtemp:
        friendly_name: "Bathroom temp"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set baseTemp = states.input_number.bathroomtemp.state | float(default=0)%}
          {%-set priceCorrection = states.sensor.pricecorrection.state | float(default=0)%}
          {%-set temp = baseTemp + priceCorrection -%}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if limit %}
            {%-set temp = temp - 8 -%}                 
          {% endif %}
          {{temp}}
      toilettemp:
        friendly_name: "Toilet temp"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set baseTemp =  states.sensor.baseheat.state | float(default=0)%}
          {%-set doorOpen = states.binary_sensor.toilet_door_left_open.state == 'on' -%}
          {%-set temp = baseTemp -%}
          {% if doorOpen %} 
            {%-set temp = 16 -%}
          {% endif %}
          {{temp}}
      tempsenttoheater:
        friendly_name: "Temp Sent To Heater"
        unit_of_measurement: "Â°C"
        value_template: >-
          {%-set alarm = states.input_select.alarm.state -%}
          {%-set uteTemp = states.sensor.ute_temperature.state | float(default=0)or states.sensor.netatmo_home_temperature.state | float(default=0) -%}
          {%-set prettyCold = float(uteTemp) < float(states.input_number.coldthreshold.state) -%}
          {%-set isHeating = states.input_select.operationmode.state == 'heat' -%}
          {%-set currentTemp = states.climate.varmepumpe.attributes.current_temperature or 20 | float(default=0)%}
          {%-set currentTemp = states.sensor.bthome_stua_temperature.state | float or 20 | float(default=0)%}
          {%-set priceCorrection =  states.sensor.pricecorrection.state | float(default=0) %}
          {%-set baseTemp =  states.sensor.baseheat.state | float(default=0)%}
          {%-set difference = ([baseTemp - currentTemp] | max) | round(1) %}       
          {%-set difference = 0.0 %}       
          {%-set temp = baseTemp -%}
          {% if prettyCold %} 
            {%-set temp = temp + float(states.input_number.extradegrees.state) -%}
          {% endif %}
          {%-set differenceStr = difference | string %}      
          {%-set decimal = differenceStr.split('.')[1] | int(default=0) %}
          {% if decimal < 6 and decimal > 0 and difference < 0.6  %}
            {%-set difference = ([([difference + 0.5, 0.5] | min),0] | max) %}
          {% else %}
            {%-set difference = difference | round() %}
          {% endif %}
          {% if isHeating and baseTemp > 15 and priceCorrection < 3 %} 
            {%-set temp = temp + ([difference, 0] | max) -%}
          {% endif %}
          {% if isHeating == false %} 
            {%-set temp = temp - priceCorrection -%}
          {% endif %}
          {{temp | round() or 22}}
      fanmode:
        friendly_name: "Fan Mode"
        value_template: >-
          {%-set targetTemp = states.climate.varmepumpe.attributes.temperature | float(default=0)%}
          {%-set currentTemp = states.climate.varmepumpe.attributes.current_temperature | float(default=0)%}
          {%-set operation = states.input_select.operationmode.state -%}
          {% if operation == 'heat' %}
          {%-set difference = targetTemp - currentTemp  %}
          {% else %}
          {%-set difference = ([targetTemp - currentTemp, currentTemp - targetTemp] | max) %}
          {%endif%}
          {% if difference > 4 %}
            high
          {% elif difference > 3 %}
            mediumHigh
          {% elif difference > 2 %}
            mid
          {% elif difference > 1 %}
            auto
          {% else %}
            auto
          {%endif%}
      priceforgraph:
        friendly_name: Power Price
        unit_of_measurement: "W"
        value_template: "{{states.sensor.nordpool.state | float(default=0)* 10000}}"
        #{{(priceNow < priceNextHour) and (states.sensor.pricelevel.state != 'EXPENSIVE')}}
      trymtemp:
        friendly_name: "Trym Temp"
        unit_of_measurement: "C"
        value_template: >-
          {%-set priceCorrection =  states.sensor.priceanalyzer.state | float(default=0) %}
          {%-set hour = now().hour | int(default=0)-%}
          {%-set trymasleep = states.input_boolean.trymasleep.state == 'on' -%}
          {%-set trymaway = states.input_boolean.tryminkindergarden.state == 'on'%}
          {%-set away = states.input_select.alarm.state == 'Arm Away'%}
          {%-set windowopen = states.binary_sensor.trym_window.state == 'on'%}
          {%-set bedroomheateron = states.switch.bedroom_heater.state == 'on' %}
          {%-set trymtemp = states.input_number.trym_temp.state | float %}

          {% if away or trymaway or windowopen %}
            {%-set temp = trymtemp - 5%}
          {% elif trymasleep or hour > 17 %}
            {%-set temp = trymtemp%}
          {% else %}
            {%-set temp = trymtemp - 5%}
          {% endif %}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if limit %}
            {%-set temp = temp - 2 -%}
          {% endif %}
          {% if bedroomheateron %}
            {%-set temp = 4 -%}
          {% endif %}
          {{temp + priceCorrection}}
      tyratemp:
        friendly_name: "Tyra Temp"
        unit_of_measurement: "C"
        value_template: >-
          {%-set priceCorrection =  states.sensor.priceanalyzer.state | float(default=0) %}
          {%-set hour = now().hour | float(default=0)-%}
          {%-set tyraasleep = states.input_boolean.tyraasleep.state == 'on' -%}
          {%-set tyraaway = states.input_boolean.tyrainkindergarden.state == 'on'%}
          {%-set away = states.input_select.alarm.state == 'Arm Away'%}
          {%-set windowopen = states.binary_sensor.tyra_window.state == 'on' %}
          {%-set bedroomheateron = states.switch.bedroom_heater.state == 'on' %}
          {%-set tyratemp = states.input_number.tyra_temp.state | float %}
          {% if away or windowopen %}
            {%-set temp = tyratemp - 5%}
          {% elif (tyraasleep)  or hour > 17 %}
            {%-set temp = tyratemp%}
          {% else %}
            {%-set temp = tyratemp - 5%}
          {% endif %}
          {% set limit = states.input_boolean.limit_heaters.state == 'on' %}
          {% if limit %}
            {%-set temp = temp - 2 -%}
          {% endif %}
          {% if bedroomheateron %}
            {%-set temp = 4 -%}
          {% endif %}
          {{temp + priceCorrection}}

binary_sensor:
  - platform: template
    scan_interval: 3600
    sensors:
      pricedifferenceissmall:
        value_template: >-
          {%-set pricedifference = states.sensor.pricespike.state | float(default=0)%}
          {%-set max = states.sensor.priceanalyzer.attributes.max | float(default=0)%}
          {{pricedifference < 0.10 or max < 0.20}}
      pricecorrection_up:
        delay_off:
          minutes: 2
        value_template: >-
          {%-set priceCorrection =  states.sensor.pricecorrection.state | float(default=0) %}
          {{priceCorrection > 0}}
      pricecorrection_down:
        delay_off:
          minutes: 2
        value_template: >-
          {%-set priceCorrection =  states.sensor.pricecorrection.state | float(default=0) %}
          {{priceCorrection < 0}}
      pricecorrection_down_for_3_hours:
        delay_on:
          hours: 4
        delay_off:
          hours: 1
        value_template: >-
          {%-set priceCorrection =  states.sensor.pricecorrection.state | float(default=0) %}
          {{priceCorrection < 0}}
      pricecorrection_down_delayed:
        delay_off:
          hours: 1
        value_template: >-
          {%-set priceCorrection =  states.sensor.pricecorrection.state | float(default=0) %}
          {{priceCorrection < 0}}
      afterpricereduction:
        value_template: >-
          {%set delayed = states.binary_sensor.pricecorrection_down_delayed.state %}
          {%set down = states.binary_sensor.pricecorrection_down.state %}
          {{delayed == 'on' and down == 'off'}}
      should_charge_car_tonight:
        value_template: >-
          {% if states.sensor.nordpool.attributes.tomorrow_valid
              and states.binary_sensor.usingspot.state == 'on'%}
            {% set today=state_attr('sensor.nordpool', 'raw_today') %}
            {% set tomorrow=state_attr('sensor.nordpool', 'raw_tomorrow') %}
            {%-set now = now().hour | float(default=0)-%}
            {% set tonight = namespace(values=[]) %}
            {% set tomorrow_night = namespace(values=[]) %}
            {% for hour in today %}
                {% if hour.start.hour >= now %}
                {% set tonight.values = tonight.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
                {% endif %}
            {%- endfor -%}
            {% for hour in tomorrow %}
                {% if hour.start.hour < 8 %}
                  {% set tonight.values = tonight.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
                {% endif %}
                {% if hour.start.hour > 8 %}
                  {% set tomorrow_night.values = tomorrow_night.values + [{'start':hour.start,'end':hour.end,'value': hour.value}] %}
                {% endif %}
            {%- endfor -%}
            {% set tonight_min = tonight.values |sort(attribute='value') %}
            {% set tomorrow_min = tomorrow_night.values |sort(attribute='value') %}
            {% set percent_of_tomorrow = ((tonight_min[0].value / tomorrow_min[0].value) * 100) %}
            {% set percent_required = 30 %}
            {{(percent_of_tomorrow - 100 | round (0)) < percent_required}}
          {% else %}
            true
          {% endif %}
      pricelowertomorrow:
        friendly_name: "Price Is Lower Tomorrow"
        value_template: >-
          {%-set hour = now().hour | float(default=0)-%}
          {%-set nordpool = states.sensor.nordpool -%}
          {% if nordpool.attributes.tomorrow_valid %}
            {% set today=state_attr('sensor.nordpool', 'raw_today')|sort(attribute='value') %}
            {% set tomorrow=state_attr('sensor.nordpool', 'raw_tomorrow')|sort(attribute='value') %}
            {{today[0].value > tomorrow[0].value}}
          {% else %}
            False
          {% endif %}
      dyreste_3_timer:
        value_template: >-
          {% set l=state_attr('sensor.nordpool', 'raw_today')|sort(attribute='value') %}
          {{ (now() >= l[23].start and now() <= l[23].end)
          or (now() >= l[22].start and now() <= l[22].end)
          or (now() >= l[21].start and now() <= l[21].end) }}
      billigste_3_timer:
        value_template: >-
          {% set l=state_attr('sensor.nordpool', 'raw_today')|sort(attribute='value') %}
          {{ (now() >= l[0].start and now() <= l[0].end)
          or (now() >= l[1].start and now() <= l[1].end)
          or (now() >= l[2].start and now() <= l[2].end) }}
      billigste_8_timer:
        value_template: >-
          {% set timer=state_attr('sensor.nordpool', 'raw_today')|sort(attribute='value') %}           
          {%set vars = namespace(count= 0, found = false)%}
          {%-for time in timer%}
            {%if vars.count < 8%}
              {%if time.start.hour == now().hour%}
                {%set vars.found = true %}
              {%endif%}
              {%-set vars.count = vars.count+1-%}
            {%endif%}
          {%-endfor%}
          {{vars.found}}
      islowprice:
        friendly_name: "Is Low Price"
        value_template: >-
          {{states.sensor.priceanalyzer.attributes['low price'] == true}}
      pricerelativycheap:
        friendly_name: "price Relativy Cheap"
        value_template: >-
          {%- set price = states.sensor.nordpool -%}
          {{price.state | float(default=0)< price.attributes.peak | float}}
      pricecorrectiondownnexthour:
        friendly_name: "Pricecorrection down next hour"
        value_template: >-
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set percentThreshold = ((nordpool.attributes.max / nordpool.attributes.min) - 1) -%}
          {% set percentThreshold = (percentThreshold / 4) + 1 %}
          {%-set hour = now().hour | int(default=0)-%}
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set priceNextHour = (nordpool.attributes.today[hour+1] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNextNextHour = (nordpool.attributes.today[hour + 2] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {% set priceFallingNextNextHour = (priceNextNextHour / priceNextHour) < percentThreshold %}
          {{(priceNextHour | float(default=0)> nordpool.attributes.peak | float) or (priceNextHour == nordpool.attributes.max) or (priceFallingNextNextHour)}}
      ismaxprice:
        friendly_name: "Is Max price?"
        value_template: >-
          {%- set price = states.sensor.nordpool -%}
          {{price.state | float(default=0) == price.attributes.max | float}}
      pricegaining:
        friendly_name: "Price Gaining Next Hour"
        value_template: >-
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set percentThreshold = ((nordpool.attributes.max / nordpool.attributes.min) - 1) -%}
          {% set percentThreshold = (percentThreshold / 4) + 1 %}
          {%-set hour = now().hour | int(default=0)-%}
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set priceNextHour = (nordpool.attributes.today[hour+1] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNextNextHour = (nordpool.attributes.today[hour + 2] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNextNextNextHour = (nordpool.attributes.today[hour + 3] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNextNextNextNextHour = (nordpool.attributes.today[hour + 4] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNow = nordpool.attributes.today[hour] | float(default=0)-%}
          {% set priceGainingNextHour = ((priceNextHour / priceNow)) > percentThreshold  %}
          {% set priceGainingNextNextHour = ((priceNextNextHour / priceNow)) > percentThreshold  %}
          {% set priceGainingNextNextNextHour = ((priceNextNextNextHour / priceNow)) > percentThreshold  %}
          {{priceGainingNextHour or (priceGainingNextNextHour) or (priceGainingNextNextNextHour)}}
      pricefalling:
        friendly_name: "Price Falling Next Hours"
        value_template: >-
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set percentThreshold = ((nordpool.attributes.min/ nordpool.attributes.max) - 1) -%}
          {% set percentThreshold = (percentThreshold / 4) + 1 %}
          {%-set hour = now().hour | int(default=0)-%}
          {%-set nordpool = states.sensor.nordpool -%}
          {%-set priceNextHour = (nordpool.attributes.today[hour+1] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNextNextHour = (nordpool.attributes.today[hour + 2] or nordpool.attributes.tomorrow[0]) | float(default=0)-%}
          {%-set priceNow = nordpool.attributes.today[hour] | float(default=0)-%}
          {%-set cheap = states.sensor.pricelevel.state != 'EXPENSIVE' and states.sensor.pricelevel.state != 'VERY_EXPENSIVE' -%}
          {% set priceFallingNextHour = (priceNextHour / priceNow) < percentThreshold %}
          {% set priceFallingNextNextHour = (priceNextNextHour / priceNow) < percentThreshold %}
          {% set priceGaining =  states.binary_sensor.pricegaining.state == 'on' %}
          {{(priceFallingNextHour or priceFallingNextNextHour) and priceGaining == false}}
      #TODO if price is falling next hour, but not nextnext hour because of threshold, keep on if is still lower, to not start warmup before at lowest price possible.
      hot_water_probably_running:
        friendly_name: "Hot Water Probably Running"
        device_class: power
        delay_off:
          hours: 2
        value_template: "{{states.switch.bathroom_fan.state == 'on' and states.input_select.alarm.state == 'Disarm'}}"

automation:
  # - alias: NotifySpikeToday
  #   trigger:
  #   - platform: time
  #     at: 06:00:00
  #   action:
  #   - service: notify.me
  #     data:
  #       message: "Price spike today is {{states.sensor.pricespike.state}}"

  # - alias: 'GarageHeaterOn'
  #   trigger:
  #     - platform: state
  #       entity_id: cover.garage_door
  #       to: 'off'
  #     - platform: state
  #       entity_id: binary_sensor.pricerelativycheap
  #       to: 'on'
  #   action:
  #   - service: climate.turn_on
  #     entity_id: climate.garage_heater

  # - alias: 'GarageHeaterOff'
  #   trigger:
  #     - platform: state
  #       entity_id: cover.garage_door
  #       to: 'on'
  #     - platform: state
  #       entity_id: binary_sensor.pricerelativycheap
  #       to: 'off'
  #   action:
  #   - service: climate.turn_off
  #     entity_id: climate.garage_heater

  # - alias: 'adjustGarageTemp'
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.pricecorrection
  #     - platform: state
  #       entity_id: input_number.garagetemp
  #     - platform: state
  #       entity_id: input_number.garagetemp
  #   action:
  #     - service: climate.set_temperature
  #       data_template:
  #         entity_id: climate.garage_heater
  #         temperature: '{{ [states.input_number.garagetemp.state | float(default=0)+ [((states.sensor.pricecorrection.state | float(default=0) * 5)), 1] | max, 0] | min }}'

  - id: adjustsokkeltemp
    alias: Climate Sokkel - Adjust temp
    mode: restart
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id:
          - sensor.sokkeltemp
          - sensor.priceanalyzer
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.sokkel
          temperature: >-
            {%-set baseTemp = states.input_number.sokkeltemp.state | float(default=0)%}
            {%-set priceanalyzer = states.sensor.pricecorrection.state | float(default=0)%}
            {{baseTemp + priceanalyzer}}

  - id: adjustbathroomtemp
    alias: Climate bathroom - Adjust temp
    mode: restart
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id:
          - sensor.bathroomtemp
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.bathroom
          temperature: "{{ states.sensor.bathroomtemp.state | int(default=0) }}"

  - id: adjustvindfangtemp
    alias: Climate Vindfang - Adjust temp
    mode: restart
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id:
          - sensor.vindfangtemp
    action:
      - service: climate.set_temperature
        data_template:
          entity_id: climate.vindfang
          temperature: "{{ states.sensor.vindfangtemp.state | int(default=0) }}"

  # - id: turnOffEaseeWhenHighPrice
  #   alias: turnOffEaseeWhenHighPrice
  #   trigger:
  #     - platform: state
  #       entity_id: sensor.pricecorrection
  #   action:
  #     - service: "switch.turn_{{iif(states('sensor.pricecorrection') | float < 0,'off','on')}}"
  #       entity_id: switch.garage_is_enabled

  - id: adjusttemp
    alias: Climate Stua - Adjust temp
    mode: restart
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: sensor.tempsenttoheater, input_select.operationmode, binary_sensor.pricegaining, sensor.toilettemp
    condition:
      condition: and
      conditions:
        # - condition: state
        #   entity_id: input_select.operationmode
        #   state: Heat
        - condition: state
          entity_id: input_boolean.warmupmorning
          state: "off"
        - condition: numeric_state
          entity_id: sensor.tempsenttoheater
          above: 15
    action:
      # - service: climate.set_hvac_mode
      #   data_template:
      #     entity_id: climate.toilet_heater
      #     hvac_mode: "heat"
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "{{states.input_select.operationmode.state}}"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: "{{ states.sensor.tempsenttoheater.state | int(default=0) }}"
      # - service: climate.set_temperature
      #   data_template:
      #     entity_id: climate.stua_heater
      #     temperature: "{{ states.sensor.baseheat.state | int(default=0) - 1 }}"
      # - service: climate.set_temperature
      #   data_template:
      #     entity_id: climate.stua_heater
      #     temperature: "{{ (states.sensor.baseheat.state | float) - 2}}"

  - alias: heatpumpadjustswingmode
    id: heatpumpadjustswingmode
    trigger:
      - platform: state
        entity_id: media_player.tv_stua
        to: "on"
        for:
          seconds: 10
      - platform: state
        entity_id: media_player.tv_stua
        to: "off"
        for:
          seconds: 10
      # - platform: state
      #   entity_id: climate.varmepumpe
      - platform: state
        entity_id: input_select.heat_pump_swing_mode
    action:
      - service: climate.set_swing_mode
        entity_id: climate.varmepumpe
        data:
          swing_mode: >-
            {% set mode = states('input_select.heat_pump_swing_mode')%}
            {%if mode == 'auto_tv'%}
              {%if states.media_player.tv_stua.state == 'on'%}
                      5_down
              {%else%}
                      auto
              {%endif%}
            {%else%}
              {{mode}}
            {%endif%}

  - alias: TurnOffClimateStua
    trigger:
      - platform: numeric_state
        entity_id: sensor.tempsenttoheater
        below: 16
      - platform: numeric_state
        entity_id: sensor.tempsenttoheater
        below: 16
        for:
          minutes: 3
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.warmupmorning
          state: "off"
    action:
      - service: climate.turn_off
        data_template:
          entity_id:
            - climate.varmepumpe
            # - climate.toilet_heater
            #- climate.stua_heater
      - service: script.turn_on
        entity_id: script.turnoffheaters

  # - id: adjustfan
  #   alias: Climate Stua - Adjust fan
  #   trigger:
  #   - platform: state
  #     entity_id: sensor.fanmode
  #   - platform: state
  #     entity_id: climate.varmepumpe
  #   - platform: state
  #     entity_id: sensor.tempsenttoheater
  #   condition:
  #     condition: and
  #     conditions:
  #     # - condition: state
  #     #   entity_id: input_select.operationmode
  #     #   state: Heat
  #       - condition: state
  #         entity_id: input_boolean.warmupmorning
  #         state: 'off'
  #       # - condition: numeric_state
  #       #   entity_id: sensor.tempsenttoheater
  #       #   above: 15
  #   action:
  #   - service: climate.set_fan_mode
  #     data_template:
  #       entity_id: climate.varmepumpe
  #       fan_mode: '{{states.sensor.fanmode.state}}'

  - alias: Toggle Office Heater
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id: binary_sensor.motionoffice
      # - platform: state
      #   entity_id: binary_sensor.motion_downstairs_office
    action:
      - service: >
          {% if states('binary_sensor.motionoffice') == 'on'
            and states('sensor.pricecorrection') | float > -1 %}
            climate.turn_on
          {% else %}
            climate.turn_off
          {% endif %}
        entity_id: climate.office_heater

  #This will also turn off heaters if heat pump is turned off manually. No need to run only them.
  #Watch out if you implement some manual climate logic, men this will probably just help.
  #Also turn off when hjemmetemp is reached?
  - id: turnOffHeatersWhenPumpOff
    alias: Climate - obey heatpump
    trigger:
      - platform: state
        entity_id: climate.varmepumpe
        to: "off"
      - platform: state
        entity_id: climate.varmepumpe
        to: "auto"
      - platform: state
        entity_id: climate.varmepumpe
        to: "cool"
      - platform: state
        entity_id: climate.varmepumpe
        to: "fan"
    action:
      - service: script.turn_on
        entity_id: script.turnoffheaters
        # TODO turn on heaters when on?

  - alias: WarmupMorningExtraCold
    id: WarmupmorningExtraCold
    trigger:
      - platform: time
        at: "04:30:00"
    condition:
      condition: and
      conditions:
        #group.people problem
        - condition: state
          entity_id: group.people
          state: "home"
          # if the temperature is under the threshold, for example -5 degrees.
        - condition: template
          value_template: "{{ float(states.sensor.ute_temperature.state) < (float(states.input_number.coldthreshold.state)) }}"
          # If the task it to warm up more than 1 degree.
      # - condition: template
      #   value_template: "{{ float(states.sensor.stua_temperature.state) < (float(states.input_number.hjemmetemp.state) - 1) }}"
    action:
      - service: script.turn_on
        entity_id: script.warmupmorning

  - alias: WarmupMorningExtraExtraCold2
    id: WarmupmorningExtraExtraCold2
    trigger:
      - platform: time
        at: "04:00:00"
    condition:
      condition: and
      conditions:
        #group.people problem
        - condition: state
          entity_id: group.people
          state: "home"
        - condition: numeric_state
          entity_id: sensor.ute_temperature
          below: -8
      # - condition: template
      #   value_template: "{{ float(states.sensor.stua_temperature.state) < (float(states.input_number.hjemmetemp.state) - 2) }}"
    action:
      - service: script.turn_on
        entity_id: script.warmupmorning

  - id: endWarmupMorning
    alias: EndWarmupUp
    trigger:
      - platform: template
        value_template: "{{(states.sensor.stua_temperature.state >= states.input_number.hjemmetemp.state) and is_state('input_boolean.warmupmorning', 'on')}}"
      - platform: state
        entity_id: input_select.alarm
        to: "Arm Home"
      - platform: state
        entity_id: input_select.alarm
        to: "Arm Away"
    # condition:
    #   - condition: template
    #     value_template: "{{(states.sensor.stua_temperature.state >= states.input_number.hjemmetemp.state) and is_state('input_boolean.warmupmorning', 'on')}}"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.warmupmorning
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: "{{ states.sensor.tempsenttoheater.state | float(default=22)}}"
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "{{ states.input_select.operationmode.state}}"
      - condition: template
        value_template: "{{ states.input_select.operationmode.state == 'heat'}}"
      # - service: climate.set_hvac_mode
      #   data_template:
      #     entity_id: climate.stua_heater
      #     hvac_mode: "heat"

  - alias: WarmupMorning
    trigger:
      - platform: time
        at: "05:00:00"
      - platform: time
        at: "05:20:00"
    condition:
      # If we want heating when home, and we are home, and it's less than 21 inside and 10 outside.
      condition: and
      conditions:
        # If we want heating when home.
        - condition: numeric_state
          entity_id: input_number.hjemmetemp
          above: 15
          # If the current temp(at 0500) is less than 21
        - condition: template
          value_template: "{{states.climate.varmepumpe.attributes.current_temperature < 21}}"
          #condition for (hjemmetemp - actual temp) > 2 degrees?
          # WIll only start heating if big difference, until there is no difference.
        #group.people problem
        - condition: state
          entity_id: group.people
          state: "home"
        # - condition: template
        #   value_template: "{{ float(states.sensor.stua_temperature.state) < (float(states.input_number.hjemmetemp.state))-0.5 }}"
        #If Ã­t's colder than 10. So, not do this in the summer.
        - condition: numeric_state
          entity_id: sensor.ute_temperature
          below: 10
    action:
      - service: script.turn_on
        entity_id: script.warmupmorning
      - service: notify.me
        data:
          message: "Warmup morning started. Temp is {{states.climate.varmepumpe.attributes.current_temperature}}"

  # - alias: "TrymHeaterOn"
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.trym_window
  #       to: "off"
  #   action:
  #     - service: climate.turn_on
  #       entity_id: climate.trym

  # - alias: "TrymHeaterOff"
  #   trigger:
  #     - platform: state
  #       entity_id: binary_sensor.trym_window
  #       to: "on"
  #   action:
  #     - service: climate.turn_off
  #       entity_id: climate.trym

  - id: TurnOffHeaters
    alias: TurnOffHeaters
    trigger:
      - platform: state
        entity_id: input_number.bortetemp
      - platform: state
        entity_id: input_select.alarm
        to: "Arm Away"
        # for:
        #    minutes: 4
      - platform: state
        entity_id: input_select.alarm
        to: "Arm Home"
        # for:
        #    minutes: 4
    condition:
      condition: or
      conditions:
        - condition: state
          entity_id: input_select.alarm
          state: "Arm Away"
        - condition: state
          entity_id: input_select.alarm
          state: "Arm Home"
    action:
      - service: script.turn_on
        entity_id: script.turnoffheaters

  - alias: TrymTemp
    trigger:
      - platform: state
        entity_id: sensor.trymtemp
    action:
      - service: climate.set_temperature
        entity_id: climate.trym
        data_template:
          temperature: "{{states.sensor.trymtemp.state | float(default=13)}}"
# - alias: WarmupMorningWeekend
#   id: WarmupmorningWeekend
#   trigger:
#   - platform: time
#     at: '06:50:00'
#   condition:
#     condition: and
#     conditions:
#     - condition: time
#       weekday:
#       - sat
#       - sun
#     - condition: state
#       entity_id: group.people
#       state: 'home'
#     - condition: numeric_state
#       entity_id: sensor.ute_temperature
#       below: 10
#       #Temperature is 2 degrees lower than target
#     # - condition: template
#     #   value_template: "{{ float(states.sensor.stua_temperature.state) < (float(states.sensor.tempsenttoheater.state) - 2) }}"
#   action:
#   - service: climate.set_temperature
#     data_template:
#       entity_id: climate.varmepumpe
#       temperature: 28
#       #temperature: '{{ float(states.sensor.tempsenttoheater.state) | int(default=0) + 3 }}'
#       #temperature: '{{ states.input_number.hjemmetemp.state | int(default=0) }}'
#   - delay:
#       minutes: 120
#   - service: climate.set_temperature
#     data_template:
#       entity_id: climate.varmepumpe
#       temperature: '{{ float(states.sensor.tempsenttoheater.state)}}'

script:
  warmupcominghome:
    alias: Warmup Coming Home
    sequence:
      - condition: template
        value_template: "{{ false }}" #Plombert
      - condition: template
        value_template: "{{ states.input_select.alarm.state != 'Disarm' }}"
      # If we want heating when home.
      - condition: numeric_state
        entity_id: input_number.hjemmetemp
        above: 15
      - condition: numeric_state
        entity_id: sensor.ute_temperature
        below: 10
      - condition: state
        entity_id: input_select.operationmode
        state: "heat"
      - condition: template
        value_template: "{{(states.climate.varmepumpe.attributes.current_temperature | int(default=0)) < (states.input_number.hjemmetemp.state | int(default=0))}}"
      - service: notify.me
        data_template:
          message: "Warmup started. Temp is {{states.climate.varmepumpe.attributes.current_temperature}}"
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "heat"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: 28
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "high"
      # - service: climate.set_hvac_mode
      #   data_template:
      #     entity_id: climate.toilet_heater
      #     hvac_mode: "heat"
      # - service: climate.set_temperature
      #   data_template:
      #     entity_id: climate.toilet_heater
      #     temperature: "{{ states.input_number.hjemmetemp.state | int(default=0)}}"
      - wait_template: "{{(states.sensor.stua_temperature.state > states.input_number.hjemmetemp.state) or (states.input_select.alarm.state == 'Disarm')}}"
        timeout: "0:45:00"
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "heat"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: "{{ float(states.input_number.bortetemp.state)}}"
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "{{ states.input_select.operationmode.state}}"
  #TODO: Set tempsenttoheater instead of bortetemp(or just run automation), but override this if something indicates that we are not coming home.

  warmupmorning:
    alias: Warmup Morning
    sequence:
      - condition: template
        value_template: "{{ false }}" #Plombert
      - service: climate.set_hvac_mode
        data_template:
          entity_id: climate.varmepumpe
          hvac_mode: "heat"
      - service: input_boolean.turn_on
        entity_id: input_boolean.warmupmorning
      - service: climate.set_fan_mode
        data_template:
          entity_id: climate.varmepumpe
          fan_mode: "high"
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: 28
      # - service: climate.set_hvac_mode
      #   data_template:
      #     entity_id: climate.toilet_heater
      #     hvac_mode: "heat"
      # - service: climate.set_temperature
      #   data_template:
      #     entity_id: climate.toilet_heater
      #     temperature: "{{ states.input_number.hjemmetemp.state | int(default=0)}}"
      - wait_template: "{{ states.sensor.stua_temperature.state > states.input_number.hjemmetemp.state}}"
        timeout: "1:00:00"
      # - service: climate.set_hvac_mode
      #   data_template:
      #     entity_id: climate.varmepumpe
      #     hvac_mode: 'heat'
      - service: climate.set_temperature
        data_template:
          entity_id: climate.varmepumpe
          temperature: >-
            {%-set priceGaining = states.binary_sensor.pricegaining.state == 'on' -%}
            {%-set uteTemp = states.sensor.ute_temperature.state | float(default=0)or states.sensor.netatmo_home_temperature.state | float(default=0) -%}
            {%-set temp = float(states.input_number.hjemmetemp.state) -%}
            {%-set prettyCold = float(uteTemp) < float(states.input_number.coldthreshold.state) -%}
            {% if prettyCold %} 
              {%-set temp = temp + float(states.input_number.extradegrees.state) -%}
            {% endif %}
            {% if priceGaining and temp > 15 %}
                {%-set temp = temp + 1 -%}
            {% endif %}
            {{temp}}
      - service: input_boolean.turn_off
        entity_id: input_boolean.warmupmorning
      # - service: climate.set_hvac_mode
      #   data:
      #     entity_id: climate.stua_heater
      #     hvac_mode: "heat"

  turnoffheaters:
    alias: Turn Off Heaters
    sequence:
      #Millsmart
    # - service: climate.turn_off
    #   data_template:
    #     entity_id: climate.stua_heater
    # - service: switch.turn_off
    #   entity_id: switch.kitchen_heater
    #   #toilet
    # - service: switch.turn_off
    #   entity_id: switch.bench
input_number:
  sokkeltemp:
    name: Sokkel Temperatur
    min: 5
    max: 30
    step: 1
    mode: slider

  vindfangtemp:
    name: Vindfang Temperatur
    min: 5
    max: 30
    step: 1
    mode: slider

  bathroomtemp:
    name: Bathroom Temperatur
    min: 5
    max: 30
    step: 1
    mode: slider

  hjemmetemp:
    name: Hjemmetemperatur
    ##initial: 22
    min: 12
    max: 30
    step: 1
    mode: slider

  bortetemp:
    name: Bortetemperatur
    ##initial: 20
    min: 12
    max: 30
    step: 1
    mode: slider

  nattatemp:
    name: Nattatemperatur
    ##initial: 20
    min: 12
    max: 30
    step: 1
    mode: slider

  temperature:
    name: Temperature
    ##initial: 22
    min: 12
    max: 30
    step: 1

  extradegrees:
    name: Extra Degrees to heat when cold
    ##initial: 22
    min: 0
    max: 10
    step: 1

  coldthreshold:
    name: Threshold for extra degrees
    ##initial: 22
    min: -20
    max: 10
    step: 1

  garagetemp:
    name: "Garage temperature"
    min: -10
    max: 20
    step: 0.5

  tyra_temp:
    name: "Tyra Temperature"
    min: 0
    max: 25
    step: 1

  trym_temp:
    name: "Trym Temperature"
    min: 0
    max: 25
    step: 1
