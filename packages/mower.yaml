mower:
  sensor:
    - platform: history_stats
      name: Mowed today
      entity_id: binary_sensor.robot_is_mowing
      state: "on"
      type: time
      start: "{{ now().replace(hour=0, minute=0, second=0) }}"
      end: "{{ now() }}"

    - platform: history_stats
      name: Mowed since docked
      entity_id: binary_sensor.robot_is_mowing
      state: "on"
      type: time
      end: "{{ now() }}"
      start: >-
        {%-set sinceDocked = states.binary_sensor.robot_charging.last_changed -%}
        {{sinceDocked}}

  binary_sensor:
    - platform: template
      scan_interval: 10
      sensors:
        robot_charging:
          device_class: battery_charging
          value_template: "{{ is_state('binary_sensor.mower_dock', 'off') }}"
          friendly_name: "Robot Charging"
        robot_problem:
          device_class: problem
          value_template: >-
            {{false and states.sensor.mowed_since_docked.state | float(default=0)> 1.8}}
          friendly_name: "Robot Stuck"
        robot_should_stop:
          friendly_name: "Robot Should Stop"
          device_class: moving
          value_template: >-
            {% set verandaOpen = is_state('binary_sensor.veranda_open','on') or is_state('binary_sensor.veranda','on') or is_state('binary_sensor.garage_backdoor','on') or is_state('binary_sensor.door_downstairs','on')%}
            {% set isDocked = is_state('binary_sensor.robot_charging','on') %}
            {% set justRained = is_state('binary_sensor.justrained','on')%}
            {% set isStuck = is_state('binary_sensor.robot_problem','on')%}
            {% set finishedForTheDay = is_state('binary_sensor.mowed_enough','on')%}
            {%-set hour = now().hour | float(default=0)-%}
            {% if isDocked and (hour > 21)%}
                false
            {% elif finishedForTheDay and (hour < 23) %}
                true
            {% else %}
              {% if verandaOpen and isDocked == false %}
                  true
              {% else %}
                {% if justRained and isDocked %}
                  true
                {% else %}
                  false
                {% endif %}
              {% endif %}
            {% endif %}
        mowed_enough:
          friendly_name: "Mowed Enough"
          value_template: >-
            {% set mowedEnough = states.sensor.mowed_today.state | float(default=0) >= states.input_number.mowingtime.state | float(default=0)%}
            {% set isDocked = is_state('binary_sensor.robot_charging','on') %}
            {{mowedEnough and isDocked}}
          delay_on:
            minutes: 20
        robot_is_mowing:
          friendly_name: "Robot is mowing"
          device_class: power
          value_template: >-
            {{states.binary_sensor.mower_dock.state == 'on' and states.switch.mower.state == 'on' and states.binary_sensor.robot_problem.state == 'off'}}
        justrained:
          friendly_name: "Just Rained"
          device_class: moisture
          value_template: "{{(states.sensor.netatmo_home_rain_last_hour.state | float) > 1}}"
          delay_off:
            hours: 5

  input_number:
    mowingtime:
      name: Mowingtime
      min: 0
      max: 12
      step: 1
      mode: box
      unit_of_measurement: "hours"

  automation:
    - alias: "MowingProblem"
      id: "mowingproblem"
      trigger:
        - platform: state
          entity_id: binary_sensor.robot_problem
          to: "on"
          for:
            minutes: 10
        - platform: state
          entity_id: binary_sensor.robot_problem
          to: "on"
          for:
            minutes: 20
        - platform: state
          entity_id: binary_sensor.veranda
          to: "on"
      condition:
        - condition: state
          entity_id: binary_sensor.robot_problem
          state: "on"
      action:
        - service: script.turn_on
          entity_id: script.notifyhome
          data_template:
            variables:
              title: Gressklipper sitter fast
              message: Gressklipper sitter fast
        - service: script.turn_on
          entity_id: script.say
          data_template:
            variables:
              message: "Gressklipperen sitter fast."

    - alias: "GivePingToMowerWhenStopped"
      id: "GivePingToMowerWhenStopped"
      mode: restart
      trigger:
        - platform: time_pattern
          minutes: "/12"
      condition: "{{is_state('switch.mower','off')}}"
      action:
        - service: switch.turn_on
          entity_id: switch.mower
        - delay:
            seconds: 5
        # Not optimal, but will try it.
        - condition: state
          entity_id: binary_sensor.robot_should_stop
          state: "on"
        - service: switch.turn_off
          entity_id: switch.mower

    - alias: "StopMowing"
      trigger:
        - platform: state
          entity_id: binary_sensor.robot_should_stop
          to: "on"
      action:
        - service: switch.turn_off
          entity_id: switch.mower

    - alias: "StartMowing"
      trigger:
        - platform: state
          entity_id: binary_sensor.robot_should_stop
          to: "off"
        - platform: time
          at: 00:00:00
        - platform: time
          at: 06:00:00
        - platform: time
          at: 02:00:00
      action:
        - service: switch.turn_on
          entity_id: switch.mower
        - delay:
            seconds: 1
        - service: switch.turn_on
          entity_id: switch.mower

    - alias: "warnMowing"
      id: "warnMowing"
      trigger:
        - platform: state
          entity_id: binary_sensor.veranda
          to: "off"
      action:
        - delay:
            seconds: 1
        - condition: state
          entity_id: binary_sensor.robot_is_mowing
          state: "on"
        - service: script.turn_on
          entity_id: script.playsound
          data_template:
            variables:
              sound: "https://sivert.duckdns.org/local/sounds/item.mp3"
