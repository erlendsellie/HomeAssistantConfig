vvb:
  template:
    - binary_sensor:
        - name: "vvb_on"
          # delay_on:
          #   minutes: 3
          delay_off:
            seconds: 10
          state: >-
            {%-set notUsingSpot = states.binary_sensor.usingspot.state == 'off' -%}
            {%-set pause = states.input_boolean.vvb_on.state == 'on' -%}
            {%-set isLowPrice = states.binary_sensor.islowprice.state == 'on' -%}
            {%-set shouldNotBother = states.binary_sensor.pricedifferenceissmall.state == 'on' -%}
            {%set pricelevel = states('sensor.pricelevel')%}
            {%set pricecorrectionDown = states('sensor.pricecorrection') | int  < 0%}
            {%set isCheap = pricelevel ==  'CHEAP' or pricelevel == 'VERY_CHEAP'%}
            {%set current_hour = states.sensor.priceanalyzer.attributes.current_hour%}
            {%set is_ten_cheapest = current_hour.is_ten_cheapest %}
            {% if pause%}
              {{true}}
            {% elif shouldNotBother %}
              {{true}}
            {% elif notUsingSpot%}
              {{true}}
            {% elif is_ten_cheapest%}
              {{true}}
            {% else %}
              {{isLowPrice or isCheap}}
            {% endif %}
    - sensor:
        - name: "vvb_temp"
          unit_of_measurement: "°C"
          state: >-
            {%-set notUsingSpot = states.binary_sensor.usingspot.state == 'off' -%}
            {%-set pause = states.input_boolean.vvb_on.state == 'on' -%}
            {%-set limit = states.input_boolean.limit_water_heater.state == 'on' -%}
            {%-set isLowPrice = states.binary_sensor.islowprice.state == 'on' -%}
            {%-set shouldNotBother = states.binary_sensor.pricedifferenceissmall.state == 'on' -%}
            {%set pricelevel = states('sensor.pricelevel')%}
            {%set pricecorrectionDown = states('sensor.pricecorrection') | int  < 0%}
            {%set isCheap = pricelevel ==  'CHEAP' or pricelevel == 'VERY_CHEAP'%}
            {%set current_hour = states.sensor.priceanalyzer.attributes.current_hour%}
            {%set is_ten_cheapest = current_hour.is_ten_cheapest %}
            {%set temp = 60%}
            {% if limit%}
              {%set temp = 20%}
            {% elif shouldNotBother or notUsingSpot or pause%}
              {%set temp = 70%}
            {% elif current_hour.is_five_most_expensive%}
              {%set temp = 30%}
            {% elif is_ten_cheapest%}
              {%set temp = 70%}
            {% elif isLowPrice or isCheap %}
              {%set temp = 60%}
            {%else%}
              {%set temp = 50%}
            {% endif %}
            {{temp}}
        - name: "VVB Average"
          unit_of_measurement: "°C"
          state: >-
            {%set bottom = states('sensor.vvb_bottom') | float%}
            {%set top = states('sensor.vvb_top') | float%}
            {{average(top,bottom)}}
        - name: "VVB Average2"
          unit_of_measurement: "°C"
          state: >-
            {%set bottom = states('sensor.vvb_bottom') | float%}
            {%set avg = states('sensor.vvb_average') | float%}
            {{average(bottom,avg)}}
        - name: "VVB Min"
          unit_of_measurement: "°C"
          state: >-
            {%set bottom = states('sensor.vvb_bottom') | float%}
            {%set top = states('sensor.vvb_top') | float%}
            {{min(top,bottom)}}
        - name: "VVB Max"
          unit_of_measurement: "°C"
          state: >-
            {%set bottom = states('sensor.vvb_bottom') | float%}
            {%set top = states('sensor.vvb_top') | float%}
            {{max(top,bottom)}}

  #Set to on always at some hours at night, to ensure hot water at morning?
  # or when car charges = start heater?

  sensor:
    - platform: history_stats
      name: VVB today
      entity_id: switch.varmtvannsbereder
      state: "on"
      type: time
      start: "{{ now().replace(hour=0, minute=0, second=0) }}"
      end: "{{ now() }}"

    - platform: statistics
      name: VVB Top Statistics
      state_characteristic: change
      entity_id: sensor.vvb_top
      max_age:
        days: 7

    - platform: statistics
      name: VVB bottom Statistics
      state_characteristic: change
      entity_id: sensor.vvb_bottom
      max_age:
        days: 7

  input_boolean:
    vvb_on:
      name: VVB on for rest of today

  automation:
    - id: ResetPauseVVBcontrolfortoday
      alias: ResetPauseVVBcontrolfortoday
      trigger:
        - platform: time
          at: "00:00:00"
      condition:
        - condition: state
          entity_id: input_boolean.vvb_on
          state: "on"
      action:
        - service: input_boolean.turn_off
          target:
            entity_id: input_boolean.vvb_on

    - id: VVBToggle
      alias: VVBToggle
      trigger:
        - platform: state
          entity_id: sensor.vvb_temp
          # To avoid bugs during restarts, or other, trigger every hour, to avoid cold showers.
        - platform: time_pattern
          minutes: 5 #Every hour, 5 minutes over.
      action:
        - service: climate.set_temperature
          data:
            temperature: "{{states('sensor.vvb_temp')}}"
          target:
            entity_id: climate.varmtvannsbereder
        - alias: "TurnOn VVB"
          service: >-
            climate.turn_on
          target:
            entity_id: climate.varmtvannsbereder

    # - id: ToggleHeavyDutyToFixPowerReading
    #   alias: ToggleHeavyDutyToFixPowerReading
    #   trigger:
    #     - platform: time_pattern
    #       minutes: "/15"
    #   condition:
    #     - condition: state
    #       entity_id: switch.varmtvannsbereder
    #       state: "on"
    #   action:
    #     - service: switch.turn_off
    #       entity_id: switch.varmtvannsbereder
    #     - delay:
    #         seconds: 3
    #     - service: switch.turn_on
    #       entity_id: switch.varmtvannsbereder

  climate:
    - platform: generic_thermostat
      name: Varmtvannsbereder
      heater: switch.varmtvannsbereder
      target_sensor: sensor.vvb_average
      min_temp: 40
      max_temp: 80
      precision: 1
      hot_tolerance: 1
      cold_tolerance: 1
      min_cycle_duration:
        minutes: 10
