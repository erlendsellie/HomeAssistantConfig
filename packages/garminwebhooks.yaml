# template:
#   - sensor:
#       - name: "Garmin Erlend Battery Level"
#         unique_id: "f8b12db9-e2fb-424f-9466-90eb11d00556"
#         device_class: "battery"
#         unit_of_measurement: "%"
#         state_class: "measurement"
#         state: "{{ states('sensor.garmin_erlend_battery_level') }}"
#         icon: "mdi:battery{% if is_state('binary_sensor.garmin_erlend_battery_is_charging', 'on') %}-charging{% endif %}{% if 0 < (states('sensor.garmin_erlend_battery_level') | float / 10 ) | round(0) * 10 < 100 %}-{{ (states('sensor.garmin_erlend_battery_level') | float / 10 ) | round(0) * 10 }}{% else %}{% if (states('sensor.garmin_erlend_battery_level') | float / 10 ) | round(0) * 10 == 0 %}-outline{% else %}{% if is_state('binary_sensor.garmin_erlend_battery_is_charging', 'on') %}-100{% endif %}{% endif %}{% endif %}"

input_select:
  garmincontrol:
    name: Garmin Control
    options:
      - None
      - Lights
      - Media
      - Cover
      - KitchenLights
      - SofaLight
    initial: None
    icon: mdi:watch
script:
  toggletv:
    sequence:
      - service: automation.trigger
        entity_id: automation.watchleftbattery
  dimdowntvsone:
    sequence:
      - service: light.turn_on
        entity_id: light.tvsone
        data:
          brightness_step_pct: -20
          transition: 1
  dimuptvsone:
    sequence:
      - service: light.turn_on
        entity_id: light.tvsone
        data:
          brightness_step_pct: 20
          transition: 1

automation:
  - alias: "reset garmincontrol"
    id: resetgarmincontrol
    trigger:
      platform: state
      entity_id: input_select.garmincontrol
    action:
      - delay:
          seconds: 5
      - service: input_select.select_option
        data:
          entity_id: input_select.garmincontrol
          option: "None"

  - alias: "GarminWebHookUp"
    id: "GarminWebHookUp"
    mode: restart
    trigger:
      - platform: webhook
        webhook_id: !secret garmincontrolup
        local_only: false
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'None'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "Media"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Lights'}}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ states.input_boolean.easleep.state == 'on'}}"
                    sequence:
                      - service: media_player.volume_up
                        entity_id: media_player.tv_soverommet
                default:
                  - service: light.turn_on
                    entity_id: light.tvsone
                    data:
                      brightness_step_pct: 20
                      transition: 1
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'KitchenLights'}}"
            sequence:
              - service: light.turn_on
                entity_id: light.kitchensone
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'SofaLight'}}"
            sequence:
              - service: light.turn_on
                entity_id: light.sofa
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Media'}}"
            sequence:
              - service: automation.trigger
                entity_id: automation.watchleftbattery
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Cover'}}"
            sequence:
              # - service: cover.open_cover
              #   entity_id: cover.veranda_curtains

  - alias: "GarminWebHookDown"
    id: "GarminWebHookDown"
    trigger:
      - platform: webhook
        webhook_id: !secret garmincontroldown
        local_only: false
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'None'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "Cover"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Lights'}}"
            sequence:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ states.input_boolean.easleep.state == 'on'}}"
                    sequence:
                      - service: media_player.volume_down
                        entity_id: media_player.tv_soverommet
                default:
                  - service: light.turn_on
                    entity_id: light.tvsone
                    data:
                      brightness_step_pct: -20
                      transition: 1
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'KitchenLights'}}"
            sequence:
              - service: light.turn_off
                entity_id: light.kitchensone
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'SofaLight'}}"
            sequence:
              - service: light.turn_off
                entity_id: light.sofa
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Cover'}}"
            sequence:
              - service: script.verandahalfway
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Media'}}"
            sequence:
              - service: script.notifyblanket
              # - choose:
              #   - conditions:
              #     - condition: template
              #       value_template: >-
              #           "{{ states.switch.mower.state == 'off' and
              #               states.binary_sensor.robot_charging == 'off'}}"
              #     sequence:
              #       - service: switch.toggle
              #         entity_id: switch.mower
              #   default:
              #     - service: switch.toggle
              #       entity_id: switch.mower

  - alias: "GarminWebHookOk"
    id: "GarminWebHookOk"
    trigger:
      - platform: webhook
        webhook_id: !secret garmincontrolok
        allowed_methods:
          - POST
        local_only: false
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'None'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "Lights"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Lights'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "KitchenLights"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'KitchenLights'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "SofaLight"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'SofaLight'}}"
            sequence:
              - service: input_select.select_option
                data:
                  entity_id: input_select.garmincontrol
                  option: "KitchenLights"
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Media'}}"
            sequence:
              - service: automation.trigger
                entity_id: automation.watch1
          - conditions:
              - condition: template
                value_template: "{{ states.input_select.garmincontrol.state == 'Cover'}}"
            sequence:
              - service: cover.toggle
                entity_id: cover.garage_door

        # - alias: 'GarminWebHookBack'
        #   id: 'GarminWebHookBack'
        #   trigger:
        #   - platform: webhook
        #     webhook_id: !secret garmincontrolback
        #local_only: false
  #   action:
  #   - choose:
  #     - conditions:
  #       - condition: template
  #         value_template: "{{ states.input_select.garmincontrol.state == 'None'}}"
  #       sequence:
  #         - service: input_select.select_option
  #           data:
  #             entity_id: input_select.garmincontrol
  #             option: 'Back'
  #     - conditions:
  #       - condition: template
  #         value_template: "{{ states.input_select.garmincontrol.state == 'Back'}}"
  #       sequence:
  #       - service: input_number.set_value
  #         data:
  #           entity_id: input_number.brightness
  #           value: 99
  #       - service: input_number.set_value
  #         data:
  #           entity_id: input_number.brightness
  #           value: 100
  #       - service: light.turn_on
  #         entity_id: light.peis
  #     - conditions:
  #       - condition: template
  #         value_template: "{{ states.input_select.garmincontrol.state == 'Lights'}}"
  #       sequence:
  #         - service: light.toggle
  #           entity_id: light.kitchensone
