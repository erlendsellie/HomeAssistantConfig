#sensor:
# - platform: scrape
#   resource: https://podkast.nrk.no/program/smartere_paa_10_minutter.rss
#   name: podcast_smartere_paa
#   select: "enclosure"
#   attribute: url
#   index: 0
#   scan_interval: 900

input_boolean:
  waking_up:
    name: "Waking Up"
  force_to_wake_up:
    name: "Force to Wake Up"

automation:
  - alias: forcewakeup
    id: forcewakeup
    mode: single
    trigger:
      platform: template
      value_template: >-
        {%-set nextAlarm = states.sensor.erlend_mobil_next_alarm.state -%}
        {%-set nextAlarmAsTimestamp = as_timestamp(nextAlarm,(as_timestamp(utcnow())+100000)) -%}
        {{(nextAlarmAsTimestamp - as_timestamp(utcnow())) < 10}}
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.force_to_wake_up
      - repeat:
          while:
            condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.force_to_wake_up
                state: "on"
              - condition: state
                entity_id: input_boolean.alarmclock
                state: "on"
              - condition: state
                entity_id: binary_sensor.erlendhome
                state: "on"
              - condition: state
                entity_id: input_boolean.easleep
                state: "on"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.forcetowakeup
            - delay:
                minutes: 5

  - alias: AlarmTime
    id: alarmtime
    trigger:
      platform: template
      value_template: >-
        {%-set nextAlarm = states.sensor.erlend_mobil_next_alarm.state -%}
        {%-set nextAlarmAsTimestamp = as_timestamp(nextAlarm,(as_timestamp(utcnow())+100000)) -%}
        {%-set minutesBefore = 10 -%}
        {{(nextAlarmAsTimestamp - as_timestamp(utcnow()) < (60 * minutesBefore))}}
    condition:
      condition: and
      conditions:
        # - condition: time
        #   weekday:
        #   - mon
        #   - tue
        #   - wed
        #   - thu
        #   - fri
        - condition: state
          entity_id: input_boolean.easleep
          state: "on"
        # - condition: state
        #   entity_id: input_boolean.casleep
        #   state: "off"
        # - condition: state
        #   entity_id: binary_sensor.ccharging
        #   state: 'off'
        - condition: state
          entity_id: input_boolean.alarmclock
          state: "on"
        # - condition: state
        #   entity_id: input_boolean.trymasleep
        #   state: 'off'
        - condition: state
          entity_id: binary_sensor.erlendhome
          state: "on"
    action:
      # - service: notify.me
      #   data:
      #     message: 'Vekking av deg startet'
      # - service: script.turn_on
      #   entity_id: script.wakeup
      # - delay:
      #     minutes: 10
      - service: script.turn_on
        target:
          entity_id: script.wakeupai

  # - alias: ErlendWakeup
  #   id: ErlendWakeup
  #   trigger:
  #     - platform: time
  #       at: 06:20:00
  #   condition:
  #     condition: and
  #     conditions:
  #       - condition: time
  #         weekday:
  #           - mon
  #           - tue
  #           - wed
  #           - thu
  #           - fri
  #       - condition: state
  #         entity_id: input_boolean.easleep
  #         state: "on"
  #       - condition: state
  #         entity_id: input_boolean.casleep
  #         state: "off"
  #       - condition: state
  #         entity_id: binary_sensor.ccharging
  #         state: "off"
  #       - condition: state
  #         entity_id: input_boolean.alarmclock
  #         state: "on"
  #       # - condition: state
  #       #   entity_id: input_boolean.trymasleep
  #       #   state: 'off'
  #       - condition: state
  #         entity_id: binary_sensor.erlendhome
  #         state: "on"
  #   action:
  #     - service: notify.me
  #       data:
  #         message: "Vekking av deg startet"
  #     - service: script.turn_on
  #       entity_id: script.wakeup

  - alias: ErlendOverSover
    id: ErlendOverSover
    trigger:
      - platform: time
        at: 08:30:00
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
        - condition: state
          entity_id: input_boolean.easleep
          state: "on"
        - condition: state
          entity_id: input_boolean.alarmclock
          state: "on"
    action:
      - service: script.turn_on
        target:
          entity_id: script.overslept

  - alias: ErlendOverSoverfortsatt
    id: ErlendOverSoverfortsatt
    trigger:
      - platform: time
        at: 08:55:00
    condition:
      condition: and
      conditions:
        - condition: time
          weekday:
            - mon
            - tue
            - wed
            - thu
            - fri
        - condition: state
          entity_id: binary_sensor.erlendhome
          state: "on"
        - condition: state
          entity_id: input_boolean.reminderlendwork
          state: "on"
    action:
      - service: script.turn_on
        target:
          entity_id: script.stilloverslept

  - alias: TurnOffWakingUp
    id: TurnOffWakingUp
    trigger:
      #todo, NFC trigger?
      - platform: state
        entity_id: input_boolean.easleep
        to: "off"
    action:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.waking_up

script:
  wakeup:
    sequence:
      - service: light.turn_on
        target:
          entity_id: light.bedroom
        data:
          brightness_pct: 100
          transition: 100
      - service: media_player.play_media
        data:
          entity_id: media_player.clock
          #media_content_id: "{{states.sensor.podcast_smartere_paa.state}}"
          media_content_id: "https://p4.p4groupaudio.com/P04_MH"
          media_content_type: "music"
      - service: media_player.volume_set
        data_template:
          entity_id: media_player.clock
          volume_level: "0.45"
      # - service: media_player.play_media
      #   entity_id: media_player.clock
      #   data:
      #     media_content_id: "{{states.sensor.podcast_smartere_paa.state}}"
      #     media_content_type: music
  wakeupai:
    sequence:
      - service: input_boolean.turn_on
        entity_id: input_boolean.waking_up
      - variables:
          nextAlarm: "{{ states.sensor.erlend_mobil_next_alarm.state }}"
      - repeat:
          while:
            - condition: state
              entity_id: input_boolean.waking_up
              state: "on"
            - condition: state
              entity_id: input_boolean.force_to_wake_up
              state: "off"
          sequence:
            - if:
                - condition: state
                  entity_id: input_boolean.casleep
                  state: "off"
              then:
                - service: light.turn_on
                  entity_id: light.bedroom
                  data:
                    brightness_pct: 100
                    transition: 100
                - service: media_player.volume_set
                  data_template:
                    entity_id: media_player.clock
                    volume_level: "0.7"
                - service: input_text.set_value
                  entity_id: input_text.openaibedroom
                  data:
                    value: ""
                - service: input_text.set_value
                  entity_id: input_text.openaibedroom
                  data:
                    value: >-
                      {%set time = now().hour | string + ':' + now().minute | string%}
                      {%set nextAlarm = states('sensor.erlend_mobil_next_alarm')%}
                      {%-set nextAlarmAsTimestamp = as_timestamp(nextAlarm,(as_timestamp(utcnow())+100000)) -%}
                      {%-set minutesBefore = 10 -%}
                      {%set relativeAlarm = ((nextAlarmAsTimestamp - as_timestamp(utcnow())) / 60) | round (0) %}
                      {%set vær = states('sensor.weather_norsk')%}
                      Du er en vekkeklokke og skal vekke meg på en sarkastisk måte. Finn på en vits også.
                      Klokken er {{time}}.
                      {%-if relativeAlarm > 0%}
                      Alarmen ringer om {{relativeAlarm}} minutter.
                      {%-else -%}
                      {%-set relativeAlarm = relativeAlarm * -1 | round (0) %}
                      Alarmen ringte for {{relativeAlarm}} minutter siden.
                      {%-endif %}
                      Været er {{vær}}, og temperaturen ute er {{states.sensor.ute_temperature.state}}
                      Neste ting i kalenderen er: {{states.calendar.arbeid.attributes.message}}
                - delay:
                    seconds: 10
                - service: light.turn_off
                  entity_id: light.bedroom
                - delay:
                    seconds: 5
                - service: light.turn_on
                  entity_id: light.bedroom
                  data:
                    brightness_pct: 100
                    transition: 100
            - delay:
                minutes: 5
  forcetowakeup:
    sequence:
      - service: light.turn_on
        target:
          entity_id: group.bedroomlights
      - action: openai_conversation.generate_content
        response_variable: generated_content
        data:
          config_entry: 7cb47cdea724030f7efc821ffaf1ae6d
          prompt: >-
            {%- set nextAlarmRaw = states('sensor.erlend_mobil_next_alarm') -%}
            {%- set now_dt = utcnow() -%}
            {%- set now_ts = as_timestamp(now_dt, default=0) -%}
            {%- set now_dt = now() -%}
            {%- set time = now_dt.strftime('%H:%M') -%}

            {# prøv å parse direkte, ellers bruk fallback #}
            {%- set p1 = as_timestamp(nextAlarmRaw, default=0) -%}
            {%- if p1 is not none %}
              {%- set nextAlarmAsTimestamp = p1 -%}
            {%- else %}
              {%- set nextAlarmAsTimestamp = as_timestamp(nextAlarmRaw, now_ts) -%}
            {%- endif %}

            {# forskjell i minutter (positiv = i framtida, negativ = i fortida) #}
            {%- set diffMinutes = ((nextAlarmAsTimestamp - now_ts) / 60) | round(0) -%}

            {# finn klokkeslettet til alarmen og lag et "i dag kl X" timestamp #}
            {%- set alarm_time_str = nextAlarmAsTimestamp | timestamp_custom('%H:%M') -%}
            {%- set today_alarm_str = now_dt.strftime('%Y-%m-%d') ~ ' ' ~ alarm_time_str -%}
            {%- set today_alarm_dt = strptime(today_alarm_str, '%Y-%m-%d %H:%M') -%}
            {%- set today_alarm_ts = as_timestamp(today_alarm_dt, default=0) -%}
            {%- set since_today_alarm = ((now_ts - today_alarm_ts) / 60) | round(0) -%}

            {# Hvis neste alarm står langt fram (f.eks. i morgen eller flere dager),
              men samme klokkeslett var tidligere i dag, vis hvor lenge siden den ringte i dag. #}
            {%- if diffMinutes < 0 %}
              {%- set display_minutes = (-diffMinutes) -%}
              {%- set direction = 'siden' -%}
            {%- elif diffMinutes >= 1440 and since_today_alarm >= 0 and since_today_alarm < 1440 %}
              {%- set display_minutes = since_today_alarm -%}
              {%- set direction = 'siden' -%}
            {%- else %}
              {%- set display_minutes = diffMinutes -%}
              {%- set direction = 'til' -%}
            {%- endif %}

            {# lag en snakkbar tekst i variabelen alarmText (brukes av TTS) #}
            {%- set abs_m = display_minutes | int -%}
            {%- if abs_m <= 0 %}
              {%- if direction == 'til' -%}
                {%- set alarmText = 'Alarmen går nå.' -%}
              {%- else -%}
                {%- set alarmText = 'Alarmen ringte akkurat nå.' -%}
              {%- endif -%}
            {%- elif abs_m < 60 %}
              {%- if direction == 'til' -%}
                {%- set alarmText = 'Alarmen går om ' ~ abs_m ~ ' minutter.' -%}
              {%- else -%}
                {%- set alarmText = 'Alarmen ringte for ' ~ abs_m ~ ' minutter siden.' -%}
              {%- endif -%}
            {%- elif abs_m < 1440 %}
              {%- set h = abs_m // 60 -%}
              {%- set m = abs_m % 60 -%}
              {%- if direction == 'til' -%}
                {%- set alarmText = 'Alarmen går om ' ~ h ~ ' ' ~ ('time' if h == 1 else 'timer') ~ ((' og ' ~ m ~ ' minutter') if m > 0 else '') ~ '.' -%}
              {%- else -%}
                {%- set alarmText = 'Alarmen ringte for ' ~ h ~ ' ' ~ ('time' if h == 1 else 'timer') ~ ((' og ' ~ m ~ ' minutter') if m > 0 else '') ~ ' siden.' -%}
              {%- endif -%}
            {%- else %}
              {%- set d = abs_m // 1440 -%}
              {%- set rem = abs_m % 1440 -%}
              {%- set h = rem // 60 -%}
              {%- set m = rem % 60 -%}
              {%- if direction == 'til' -%}
                {%- set alarmText = 'Alarmen går om ' ~ d ~ ' ' ~ ('dag' if d == 1 else 'dager') ~ ((' og ' ~ h ~ ' ' ~ ('time' if h==1 else 'timer')) if h > 0 else '') ~ ((' og ' ~ m ~ ' minutter') if m > 0 else '') ~ '.' -%}
              {%- else -%}
                {%- set alarmText = 'Alarmen ringte for ' ~ d ~ ' ' ~ ('dag' if d == 1 else 'dager') ~ ((' og ' ~ h ~ ' ' ~ ('time' if h==1 else 'timer')) if h > 0 else '') ~ ((' og ' ~ m ~ ' minutter') if m > 0 else '') ~ ' siden.' -%}
              {%- endif -%}
            {%- endif %}

            {# ukedag / jobb eller fri #}
            {%- set wd_en = now_dt.strftime('%A') -%}
            {%- set wd_map = {'Monday':'mandag','Tuesday':'tirsdag','Wednesday':'onsdag','Thursday':'torsdag','Friday':'fredag','Saturday':'lørdag','Sunday':'søndag'} -%}
            {%- set wd = wd_map[wd_en] -%}
            {%- set work_msg = 'du skal på jobb i dag' if now_dt.weekday() < 5 else 'du har fri i dag' -%}

            {%- set vær = states('sensor.weather_norsk') -%}
            {%- set temp = states('sensor.ute_temperature') -%}


            {% set today = now().date() %}
            {% set ns = namespace(events=[]) %}


            {% for cal in states.calendar %}
                  
                      {% set st = cal.attributes.start_time if 'start_time' in cal.attributes else None %}
                      {% if st %}
                          {% set start = as_datetime(st).date() %}
                        {% if start == today %}
                            {% set message = cal.attributes.message if 'message' in cal.attributes else None %}
                            {% set person = cal.attributes.friendly_name %}
                          {% if person == 'Carolinewinge@gmail.com' %}
                          {% set person = 'Caroline' %}
                          {% endif %}
                          {% if person != 'Caroline' and person != 'Trym' %}
                          {% set person = 'Meg' %}
                          {% endif %}
                            {% if message and person %}
                            
                                {% set ns.events = ns.events + [person + ": " + message] %}
                            {% endif %}
                        {% endif %}
                    
                {% endif %}
            {% endfor %}
            {% set calendar = ns.events | join(", ") if ns.events else "Ingen ting i kalenderen i dag." %}

            {# --- selve prompten som sendes til OpenAI --- #}
            Du er en vekkeklokke-assistent og skal vekke brukeren på en veldig sarkastisk og frekk måte. Gi full sarkasme. Klokka er {{ time }}. {{ alarmText }} Det er {{ wd }}, {{ work_msg }}. Været er {{ vær }}, og temperaturen ute er {{ temp }} grader. Dette står i kalendere idag: {{calendar}}
            Lag en frekk og sarkastisk vekkermelding på norsk, på skikkelig trøndersk, som passer for talesyntese — tydelig uttale, naturlig språk (bruk "en" i stedet for "1" i tale der det er naturlig). Svar med SSML, uten noen code-block ellernoe, kun den rene SSML-teksten. Start meldingen direkte og hold til en frekk stil. Snakk trøndersk og vær helt på kanten!

      # - service: notify.mobile_app_erlend_mobil
      #   data:
      #     title: "Vekkeklokke"
      #     message: "{{ generated_content.text }}"
      #     data:
      #       channel: "vekkeklokke"
      #       ttl: 0
      #       priority: high
      - service: media_player.volume_set
        target:
          entity_id: media_player.clock
        data:
          volume_level: 0.7
      - service: tts.speak
        target:
          entity_id: tts.google_cloud
        data:
          media_player_entity_id: media_player.clock
          message: "{{ generated_content.text }}"
      - delay:
          seconds: 45

      - service: media_player.volume_set
        target:
          entity_id: media_player.clock
        data:
          volume_level: 0.5

      - service: media_player.play_media
        target:
          entity_id: media_player.clock
        data:
          media_content_type: "audio/mp4"
          media_content_id: "https://p4.p4groupaudio.com/P04_MH"

  overslept:
    sequence:
      - service: script.notifycaroline
        data:
          title: Erlend har ikke stått opp enda.
          message: Han burde vekkes.!
      - service: notify.me #earlier erlendpush
        data:
          title: Erlend har ikke stått opp enda.
          message: Han burde vekkes!
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights

  stilloverslept:
    sequence:
      - service: notify.me #earlier erlendpush
        data:
          title: Erlend har ikke dratt på jobb enda
          message: Vekk han om han skal på jobb!
      - service: script.notifycaroline
        data:
          title: Erlend har ikke dratt på jobb enda
          message: Vekk han om han skal på jobb!
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights
      - service: light.turn_off
        entity_id: group.bedroomlights
      - service: light.turn_on
        entity_id: group.bedroomlights
