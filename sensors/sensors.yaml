#works, but we have tibber, so.
# - platform: integration
#   source: sensor.pulse_power
#   name: energy_spent
#   unit_prefix: k
#   round: 2

- platform: rest
  name: TSLA
  scan_interval: 120
  json_attributes:
    - o
    - h
    - i
    - pc
    - t
  resource: https://finnhub.io/api/v1/quote?symbol=TSLA&token=bpt70g7rh5r8muvsh2f0
  value_template: "{{ value_json.c }}"
  force_update: true
  unit_of_measurement: USD

- platform: rest
  name: PLTR
  scan_interval: 120
  json_attributes:
    - o
    - h
    - i
    - pc
    - t
  resource: https://finnhub.io/api/v1/quote?symbol=PLTR&token=bpt70g7rh5r8muvsh2f0
  value_template: "{{ value_json.c }}"
  force_update: true
  unit_of_measurement: USD

# - platform: rest
#   name: GME
#   scan_interval: 5
#   json_attributes:
#   resource: https://query2.finance.yahoo.com/v10/finance/quoteSummary/GME?formatted=true&crumb=8ldhetOu7RJ&lang=en-US&region=US&modules=defaultKeyStatistics%2CfinancialData%2CcalendarEvents&corsDomain=finance.yahoo.com
#   value_template: "{{ value_json.quoteSummary.result[0].financialData.currentPrice.raw }}"
#   force_update: true
#   unit_of_measurement: USD

# - platform: scrape
#   name: 'THETA'
#   resource: 'https://coinmarketcap.com/currencies/theta/'
#   select: 'div.priceValue___11gHJ'
#   value_template: "{{value.split('$')[1] | float}}"
#   unit_of_measurement: USD

# - platform: command_line
#   command: 'curl -X GET -H "Content-type: application/json" -H "kp-api-token: {{states.sensor.postenapikey.state}}"  https://www.posten.no/levering-av-post/_/service/no.posten.website/delivery-days?postalCode=7072'
#   name: MailToday
#   json_attributes:
#     - nextDeliveryDays
#   value_template: "{{'i dag' in (value_json.nextDeliveryDays | string) }}"
#   scan_interval: 57600
#   command_timeout: 30

# - platform: template
#   sensors:
#     date:
#       friendly_name: 'Date'
#       value_template: '{{ states.sensor.json_time.attributes["date"] }}'
#     milliseconds:
#       friendly_name: 'milliseconds'
#       value_template: '{{ states.sensor.json_time.attributes["milliseconds_since_epoch"] }}'

# - platform: alpha_vantage
#   api_key: !secret alpha_vantage
#   symbols:
#     - symbol: TSLA
#       name: Tesla
#     # - symbol: TSLA
#     #   name: Tesla NOK
#     #   currency: NOK
#   foreign_exchange:
#     - name: USD_NOK
#       from: USD
#       to: NOK

- platform: google_wifi
  host: 192.168.1.1

# - platform: wasteplan_trv
#   id: 1035
#   pickup_day: 1

# - platform: darksky
#   api_key: !secret darksky_api_key
#   forecast:
#     - 0
#     - 1
#   hourly_forecast:
#     - 8
#   monitored_conditions:
#     - summary
#     - precip_type
#     - precip_intensity
#     - precip_probability
#     - temperature
#     - dew_point
#     - wind_speed
#     - wind_bearing
#     - cloud_cover
#     - humidity
#     - pressure
#     - visibility
#     - ozone
#     - minutely_summary
#     - hourly_summary
#     - daily_summary
#     - precip_intensity_max
#     - temperature_low
#     - temperature_high
#     - apparent_temperature
#     - alerts

# - platform: waze_travel_time
#   name: "Erlend To Home"
#   origin: person.erlend
#   destination: zone.home
#   region: "EU"
#   avoid_subscription_roads: true

# - platform: waze_travel_time
#   name: "Erlend To Work"
#   origin: person.erlend
#   destination: zone.work
#   region: "EU"
#   avoid_subscription_roads: true

# - platform: waze_travel_time
#   name: "Caroline to home"
#   origin: person.caroline
#   destination: zone.home
#   region: "EU"
#   avoid_subscription_roads: true

- platform: entur_public_transport
  stop_ids:
    - NSR:StopPlace:43677
    - NSR:StopPlace:43417

# - platform: authenticated
#   enable_notification: false

- platform: time_date
  display_options:
    - "time"
    - "date"
    - "date_time"
    - "time_date"
    - "time_utc"

- platform: websocket_api

- platform: tellstick
  only_named:
    - id: 11 #13
      name: Bathroom Tellstick
    - id: 33
      name: Stua
    - id: 101
      name: Gaming Rom
    - id: 104
      name: Ute
    - id: 135
      name: office_temp
#nc core-tellstick 50801

# - platform: systemmonitor
#   resources:
#     - type: memory_use_percent
#     - type: load_15m
#     - type: processor_use
#     - type: last_boot
#     - type: disk_use_percent
#       arg: /
#     - type: load_5m

#     - type: load_1m

- platform: filter
  name: "filtered consumption"
  entity_id: sensor.pulse_power
  filters:
    - filter: throttle
      window_size: 4
    - filter: outlier
      window_size: 4
      radius: 2.0
    - filter: lowpass
      time_constant: 10

- platform: filter
  name: "filtered consumption extra"
  entity_id: sensor.pulse_power
  filters:
    - filter: throttle
      window_size: 10
    - filter: outlier
      window_size: 4
      radius: 2.0
    - filter: lowpass
      time_constant: 60

    # - filter: time_simple_moving_average
    #   window_size: 00:05
    #   precision: 0

  #do not work when consumption not in logger.
# - platform: statistics
#   entity_id: sensor.pulse_power
#   name: consumptionRounded
#   sampling_size: 30

# - platform: statistics
#   entity_id: sensor.pulse_power
#   name: consumptionRoundedMore
#   sampling_size: 90

# - platform: statistics
#   name: prisstatistics
#   entity_id: sensor.powerprice
#   max_age:
#     hours: 24

# - platform: statistics
#   name: Powerstatistics
#   entity_id: sensor.electricity_price_sivert_thonstads_vei_6b
#   max_age:
#     hours: 24

# - platform: statistics
#   name: stuastatistics
#   entity_id: sensor.stua_temperature
#   max_age:
#     hours: 168

# - platform: statistics
#   name: Monthlyelectric
#   entity_id: sensor.powerstatistics_mean
#   sampling_size: 3000
#   max_age:
#     days: 30

- platform: statistics
  name: BathroomHumidity
  entity_id: sensor.bathroom_humidity
  state_characteristic: change
  sampling_size: 60
  max_age:
    minutes: 30

- platform: statistics
  name: TSLAStatistics
  sampling_size: 200
  state_characteristic: change
  entity_id: sensor.tsla
  max_age:
    days: 7

# - platform: attributes
#   friendly_name: "Trym Sover Last turned on"
#   attribute: last_triggered
#   icon: "mdi:clock"
#   time_format: "%e %B - %H:%M:%S"
#   entities:
#     - automation.trymsoveron

# - platform: scrape
#   name: 'tslascrape'
#   resource: 'https://finance.yahoo.com/quote/TSLA'
#   select: 'span.C\(\$primaryColor\).Fz\(24px\).Fw\(b\)'
#   #select: '#quote-header-info > div.My\(6px\).Pos\(r\).smartphone_Mt\(6px\) > div > p > span.C\(\$primaryColor\).Fz\(24px\).Fw\(b\)'

# - platform: scrape
#   name: 'GME Scrape'
#   resource: 'https://finance.yahoo.com/quote/GME/'
#   select: '#quote-header-info > div.My\(6px\).Pos\(r\).smartphone_Mt\(6px\) > div.D\(ib\).Va\(m\).Maw\(65\%\).Ov\(h\) > div > span.Trsdu\(0\.3s\).Fw\(b\).Fz\(36px\)'
#   unit_of_measurement: USD
#   value_template: "{{ value | float(default=0)}}"

- platform: template
  sensors:
    #     snow:
    #       unit_of_measurement: cm
    #       friendly_name: Snow next 8 hours
    #       icon_template: mdi:weather-snowy
    #       value_template: >
    #         {%- set snow = namespace(amount=0) -%}
    #         {%- set now = as_timestamp(now(), default=0)) -%}
    #         {%- for weather in states.weather.home_hourly.attributes.forecast -%}
    #           {%- if (as_timestamp(weather.datetime, default=0) - now < (60*60*8)) -%}
    #             {%- if weather.condition == 'snowy' -%}
    #                     {%- set snow.amount = snow.amount + weather.precipitation %}
    #             {%- endif -%}
    #           {% endif %}
    #         {%- endfor -%}
    #         {{snow.amount}}

    # erlend:
    #   value_template: >
    #     {%if states.person.erlend.state == 'away' or states.person.erlend.state == 'not_home' %}
    #     {% set address = states.sensor.erlendaddress.state.split(',')[0] %}
    #     {%if address == 'Unknown' %}
    #       {{states.person.erlend.state}}
    #     {%else %}
    #       {{address}}
    #     {%endif %}
    #     {%else %}
    #     {{states.person.erlend.state}}
    #     {%endif %}
    # caroline:
    #   value_template: >
    #     {%if states.person.caroline.state == 'away' or states.person.caroline.state == 'not_home'%}
    #     {% set address = states.sensor.carolineaddress.state.split(',')[0] %}
    #     {%if address == 'Unknown' %}
    #       {{states.person.caroline.state}}
    #     {%else %}
    #       {{address}}
    #     {%endif %}
    #     {%else %}
    #     {{states.person.caroline.state}}
    #     {%endif %}
    # erlenddirection:
    #   value_template: "{{states.proximity.homeerlend.attributes.dir_of_travel}}"
    peoplehome:
      value_template: >
        {% if(states.person.erlend.state == 'home' and states.person.caroline.state != 'home') %}
        Erlend
        {% elif(states.person.caroline.state == 'home' and states.person.erlend.state != 'home') %}
        Caroline
        {% elif(states.person.erlend.state == 'home' and states.person.caroline.state == 'home') %}
        Both
        {% elif(states.group.people.state == 'home') %}
        Guests
        {% else %}
        No one
        {% endif %}
      icon_template: >-
        {% if(states.person.erlend.state == 'home' and states.person.caroline.state != 'home') %}
        mdi:human-male
        {% elif(states.grpersonoup.caroline.state == 'home' and states.grpersonoup.erlend.state != 'home') %}
        mdi:human-female
        {% elif(states.person.erlend.state == 'home' and states.person.caroline.state == 'home') %}
        mdi:human-male-female
        {% elif(states.group.people.state == 'home') %}
        mdi:account
        {% else %}
        mdi:account-off
        {% endif %}
    alarm:
      value_template: >
        {% if states.binary_sensor.erlendhome.state == 'on' or states.binary_sensor.carolinehome.state == 'on' or states.group.people.state == 'home' %}
          {% if (states.input_boolean.easleep.state == 'on' or states.binary_sensor.erlendhome.state == 'off')
              and 
              (states.input_boolean.casleep.state == 'on' or states.binary_sensor.carolinehome.state == 'off')
              and 
              (states.binary_sensor.erlendhome.state == 'on' or states.binary_sensor.carolinehome.state == 'on')  %}
            Arm Home
          {% elif 
          (states.binary_sensor.erlendhome.state == 'off' and states.binary_sensor.carolinehome.state == 'off')
            and
            states.device_tracker.stian.state == 'home'
            and states.input_boolean.stianasleep.state == 'on'
          %}
            Arm Home
          {% else %}
            Disarm
          {% endif %}
        {% else %}
            Arm Away
        {% endif %}
    bad_weather:
      value_template: >
        Nice
    # bad_weather:
    #   #TODO Fix this one without darksky
    #   # {% if is_state('sensor.dark_sky_precip_0d' , 'snow') %} snow
    #   value_template: >
    #     {% if ((states('sensor.dark_sky_overnight_low_temperature')| int(default=0) < 4) and (states('sensor.dark_sky_dew_point')| int(default=0) < 6)
    #       and (states('sensor.dark_sky_wind_speed')| int(default=0) < 12) and (states('sensor.dark_sky_cloud_coverage')| int(default=0) < 20)
    #       and (states(' sensor.dark_sky_humidity')| int(default=0) > 50)) %}
    #         frost
    #     {% elif (is_state('sensor.dark_sky_precip' , 'snow') and (states('sensor.dark_sky_overnight_low_temperature')| int(default=0) < 0)) %}
    #         frost
    #     {% elif (states('sensor.dark_sky_precip_intensity')| int(default=0) > 7) %}
    #         heavy_rain
    #     {% elif (states.sensor.dark_sky_overnight_low_temperature_0d.state | int(default=0) < 0) %}
    #         freezing overnight
    #     {% else %}
    #         clear
    #     {% endif %}
    ebattery:
      unit_of_measurement: "%"
      value_template: "{{ states.sensor.erlend_mobil_battery_level.state}}"
    wear_battery:
      unit_of_measurement: "%"
      friendly_name: "Wear Battery"
      value_template: >-
        {% if (states.input_number.wear_battery.state | float) > ( 0 | int(default=0)) %} 
          {{states.input_number.wear_battery.state | round()}}
        {% endif %}
    wear_heart_rate:
      unit_of_measurement: "BPM"
      friendly_name: "Heart Rate"
      value_template: >-
        {% if (states.input_number.wear_heart_rate.state | float) > ( 0 | int(default=0)) %} 
          {{states.input_number.wear_heart_rate.state | round()}}
        {% endif %}
    wear_steps:
      unit_of_measurement: "steps"
      friendly_name: "Wear Steps"
      value_template: >-
        {% if (states.input_number.wear_steps.state | float) > ( 0 | int(default=0)) %} 
          {{states.input_number.wear_steps.state | round()}}
        {% endif %}
    brightnessfortrymlight:
      friendly_name: "Brightness for Trym lights"
      unit_of_measurement: "%"
      value_template: >-
        {% if states.input_boolean.trymasleep.state == 'on' %} 
        5
        {% elif now().hour < 7 %}
        70
        {% else %}
        100
        {% endif %}
    brightnessforlights:
      friendly_name: "Brightness for lights"
      unit_of_measurement: "%"
      value_template: >-
        {% if states.input_select.alarm.state == 'Arm Home' %} 
        20
        {% elif now().hour < 9 %}
        70
        {% else %}
        100
        {% endif %}
    brightnessforupstairslights:
      friendly_name: "Brightness for lights"
      unit_of_measurement: "%"
      value_template: >-
        {% if states.input_boolean.trymasleep.state == 'on' or states.input_boolean.tyraasleep.state == 'on' %}
        40
        {% elif (states.input_boolean.casleep.state == 'on' or states.input_boolean.easleep.state == 'on')
        and (now().hour < 23 or now().hour > 6)  %} 
        30
        {% else %}
        {{ states.sensor.brightnessforlights.state }}
        {% endif %}
    brightnessforbedroomlights:
      friendly_name: "Brightness for bedroomlights"
      unit_of_measurement: "%"
      value_template: >-
        {% if states.input_boolean.trymasleep.state == 'on' or states.input_boolean.tyraasleep.state == 'on' %}
        40
        {% elif (states.input_boolean.casleep.state == 'on' or states.input_boolean.easleep.state == 'on')
        and (now().hour < 23 or now().hour > 8)  %} 
        30
        {% else %}
          {{ states.sensor.brightnessforlights.state }}
        {% endif %}
    # brightnessforbathroomlights:
    #   unit_of_measurement: "%"
    #   value_template: >-
    #     {% set dummy = states("sensor.time") %}
    #     {% if states.input_select.alarm.state == 'Arm Home' %}
    #     10
    #     {% else %}
    #     100
    #     {% endif %}
    trymsleeptime:
      friendly_name: "Trym Sleep time"
      unit_of_measurement: "minutes"
      #as_timestamp Maybe here!
      value_template: >-
        {% set dummy = states("sensor.time") %}
        {% if states.input_boolean.trymasleep.state == 'on' %}
            {{((as_timestamp(utcnow()) - as_timestamp(states.automation.trymsoveron.attributes.last_triggered,0, default=0)) / 60) | round(0)}}
        {% elif states.input_boolean.tryminkindergarden.state == 'on' %}
            {{((as_timestamp(utcnow()) - as_timestamp(states.automation.trym_left_in_school.attributes.last_triggered, default=0)) / 60) | round(0)}}
        {% else %}
            {{((as_timestamp(utcnow()) - as_timestamp([states.automation.trymsoveroff.attributes.last_triggered, states.automation.trym_picked_up_in_kindergarden.attributes.last_triggered] | max, default=0)) / 60) | round(0)}}
        {% endif %}
    trymsleeptimeformatted:
      friendly_name: "Trym Sleep time"
      value_template: >-
        {{ (states.sensor.trymsleeptime.state | int(default=0)) // 60 }}:{{ '{:0>2d}'.format((states.sensor.trymsleeptime.state | int(default=0))%60) }} hours
    tyrasleeptimeformatted:
      friendly_name: "Tyra Sleep time"
      value_template: >-
        {{ (states.sensor.tyrasleeptime.state | int(default=0)) // 60 }}:{{ '{:0>2d}'.format((states.sensor.tyrasleeptime.state | int(default=0))%60) }} hours
    tyrasleeptime:
      friendly_name: "Tyra Sleep time"
      unit_of_measurement: "minutes"
      #as_timestamp maybe here
      value_template: >-
        {% set dummy = states("sensor.time") %}
        {% if states.input_boolean.tyraasleep.state  == 'on'%}
            {{((as_timestamp(utcnow()) - as_timestamp(states.automation.tyrasoveron.attributes.last_triggered, default=0)) / 60) | round(0)}} 
        {% else %}
            {{((as_timestamp(utcnow()) - as_timestamp(states.automation.tyrasoveroff.attributes.last_triggered, default=0)) / 60) | round(0)}}                
        {% endif %}
    # trymsleeptime:
    #   friendly_name: "Trym Sleep time"
    #   unit_of_measurement: "minutes"
    #   entity_id: sensor.date_time
    #   value_template: >-
    #             {% if states.input_boolean.trymasleep.state = 'on' %}
    #             {{relative_time(states.input_boolean.trymasleep.last_changed)}}
    #             {% endif %}

    # washingmachinenotmovedin:
    #   friendly_name: 'Time since Washer moved'
    #   value_template: >-
    #       {{(as_timestamp(utcnow()) - as_timestamp(states.sensor.coordination_158d0002a520b4.last_changed, default=0))}}

    # octoprint_time_remaining:
    #   friendly_name: "OctoPrint Time Remaining Left"
    #   unit_of_measurement: Minutes
    #   value_template: >-
    #     {%set seconds = as_timestamp(states.sensor.octoprint_estimated_finish_time.state, default=0) - as_timestamp(now(), default=0))%}
    #     {{(seconds)}}
    # octoprint_time_left_minutes:
    #   friendly_name: "OctoPrint Minutes Left"
    #   unit_of_measurement: Minutes
    #   value_template: >-
    #     {{((states.sensor.octoprint_time_remaining.state | int(default=0)) /60 )|round(0)}}
    # octoprint_time_ready: #this works now.
    #   friendly_name: "OctoPrint ETA time"
    #   device_class: "timestamp"
    #   value_template: >-
    #     {%- set date = as_timestamp(now(), default=0)) + states('sensor.octoprint_time_remaining')| float(default=0) -%}
    #     {{date | timestamp_local}}

    # realtargettemp:
    #   friendly_name: "Target"
    #   unit_of_measurement: "°C"
    #   value_template: '{{ states.climate.varmepumpe.attributes.temperature | float(default=0)}}'

    targettemp:
      friendly_name: "Target"
      unit_of_measurement: "°C"
      value_template: "{{ states.input_number.temperature.state | float(default=0)}}"

    tvsource:
      friendly_name: "TV Source"
      value_template: '{{ states.media_player.tv_stua.attributes.source or "off"}}'

      #working great, just unused.
    # powerprice:
    #   friendly_name: "Power Price"
    #   unit_of_measurement: "NOK/Kwh"
    #   value_template: '{{ (states.sensor.electricity_price_sivert_thonstads_vei_6b.state | float(default=0)+ ((1875+(39/12)) +(0.426*float(states.sensor.electricity_price_sivert_thonstads_vei_6b.attributes.estimated_annual_consumption)))/float(states.sensor.electricity_price_sivert_thonstads_vei_6b.attributes.estimated_annual_consumption))}}'
    #   #value_template: '{{ states.sensor.electricity_price_sivert_thonstads_vei_6b.state | float(default=0)+ 0.504125}}'

    #unused now, but fun to see what comes off it. Will show in %.
    # brigtnesstablepct:
    #   friendly_name: Table Brightness pct
    #   unit_of_measurement: "%"
    #   value_template: '{{float(states.light.kjokkenbord.attributes.brightness*0.3921568627450981)}}'
    # distancefromhome:
    #   friendly_name: Distance from home
    #   unit_of_measurement: km
    #   value_template: >-
    #     {% set dummy = states("sensor.time") %}
    #     {{[states.proximity.homecaroline.state | int(default=0), states.proximity.homeerlend.state | int(default=0)] | min | int(default=0)}}
    speakervolume:
      friendly_name: "Speaker Volume"
      unit_of_measurement: "%"
      value_template: >-
        {%-set trymasleep = states.input_boolean.trymasleep.state == 'on' -%}
        {%-set tyraasleep = states.input_boolean.tyraasleep.state == 'on' -%}
        {% if trymasleep or tyraasleep %}
          0.3
        {% elif states.input_boolean.powernap.state == 'on' %} 
          0.0
        {% elif states.input_select.alarm.state == 'Disarm' %} 
          0.5
        {% elif states.input_select.alarm.state == 'Arm Home'%}
          0.1
        {% else %}
          0.0
        {% endif %}
    unlockedby:
      friendly_name: "Door unlocked by"
      value_template: "{{states.lock.ytterdor.attributes.changed_by}}"
    # {% if states.input_select.alarm.state == 'Disarm' %}
    #   {% if float(states.sensor.ute_temperature.state) < float(states.input_number.coldthreshold.state) %}
    #     {{ float(states.input_number.hjemmetemp.state) + float(states.input_number.extradegrees.state) }}
    #   {% else %}
    #     {{ float(states.input_number.hjemmetemp.state) + 0 }}
    #   {% endif %}
    # {% elif states.input_select.alarm.state == 'Arm Home'%}
    #     {{ float(states.input_number.nattatemp.state) }}
    # {% else %}
    #   {% if float(states.sensor.ute_temperature.state) < float(states.input_number.coldthreshold.state) %}
    #     {{ float(states.input_number.bortetemp.state) + float(states.input_number.extradegrees.state) }}
    #   {% else %}
    #     {{ [15, (float(states.input_number.bortetemp.state)) - (float(states.sensor.distancefromhome.state)/10) | round(0)] | max }}
    #   {% endif %}
    # {% endif %}
# - platform: mqtt
#   name: "Table light energy"
#   state_topic: "tele/SONOFF-1/ENERGY"
#   value_template: "{{ value_json.Today }}"
#   unit_of_measurement: "kWh"
# - platform: mqtt
#   name: "Table light power"
#   state_topic: "tele/SONOFF-1/ENERGY"
#   value_template: "{{ value_json.Power }}"
#   unit_of_measurement: "W"
# - platform: mqtt
#   name: "Table light voltage"
#   state_topic: "tele/SONOFF-1/ENERGY"
#   value_template: "{{ value_json.Voltage }}"
#   unit_of_measurement: "V"

#Diff
# {%-set targetTemp = temp | float(default=0)%}
# {%-set currentTemp = states.climate.varmepumpe.attributes.current_temperature | float(default=0)%}
# {%-set difference = (currentTemp - targetTemp) | int(default=0) %}
# {%-set temp = temp - difference -%}
# {{temp}}

#Something wrong with quota?

# - platform: google_geocode
#   name: 'Caroline Location'
#   origin: device_tracker.life360_caroline_winge
#   options: street_number, street, city
#   display_zone: hide
#   gravatar: youremail@address.com
#   api_key: !secret maps_api_key

# - platform: google_geocode
#   name: 'Erlend Location'
#   origin: device_tracker.life360_erlend_sellie
#   display_zone: hide
#   gravatar: youremail@address.com
#   api_key: !secret maps_api_key

# - platform: scrape
#   resource: https://www.home-assistant.io
#   select: ".btn-success"
#   username: erlends@onevoice.no
#   password: onkelpinball
